// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package dynamicFeeHandler

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DynamicFeeHandlerABI is the input ABI used to generate the binding from.
const DynamicFeeHandlerABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeHandlerRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fromDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeHandlerRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gasUsed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"setFeeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"gasUsed\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"feePercent\",\"type\":\"uint16\"}],\"name\":\"setFeeProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// DynamicFeeHandlerBin is the compiled bytecode used for deploying new contracts.
var DynamicFeeHandlerBin = "0x60c06040523480156200001157600080fd5b50604051620037fa380380620037fa8339818101604052810190620000379190620002a3565b81818173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050620000b66000801b33620000c060201b60201c565b50505050620002ea565b620000d28282620000d660201b60201c565b5050565b620000e88282620001c760201b60201c565b620001c357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001686200023160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026b826200023e565b9050919050565b6200027d816200025e565b81146200028957600080fd5b50565b6000815190506200029d8162000272565b92915050565b60008060408385031215620002bd57620002bc62000239565b5b6000620002cd858286016200028c565b9250506020620002e0858286016200028c565b9150509250929050565b60805160a0516134ce6200032c600039600081816107b60152610d2c01526000818161063c0152818161097101528181610cd70152610fe801526134ce6000f3fe6080604052600436106101095760003560e01c8063745e6b6111610095578063bff4275511610064578063bff427551461035c578063c297983f14610385578063d547741f146103ae578063ef4f081f146103d7578063fc818cfb1461041557610109565b8063745e6b61146102a057806391d14854146102cb578063a217fddf14610308578063a8a989621461033357610109565b8063318c136e116100dc578063318c136e146101cd57806336568abe146101f85780635e1fab0f14610221578063692229481461024a5780636fb7cb571461027557610109565b806301ffc9a71461010e578063248a9ca31461014b57806325307065146101885780632f2ff15d146101a4575b600080fd5b34801561011a57600080fd5b5061013560048036038101906101309190611de1565b610440565b6040516101429190611e29565b60405180910390f35b34801561015757600080fd5b50610172600480360381019061016d9190611e7a565b6104ba565b60405161017f9190611eb6565b60405180910390f35b6101a2600480360381019061019d9190611fcd565b6104d9565b005b3480156101b057600080fd5b506101cb60048036038101906101c6919061209c565b610611565b005b3480156101d957600080fd5b506101e261063a565b6040516101ef91906120eb565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a919061209c565b61065e565b005b34801561022d57600080fd5b5061024860048036038101906102439190612106565b6106e1565b005b34801561025657600080fd5b5061025f61077a565b60405161026c9190612150565b60405180910390f35b34801561028157600080fd5b5061028a61078e565b60405161029791906120eb565b60405180910390f35b3480156102ac57600080fd5b506102b56107b4565b6040516102c291906120eb565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed919061209c565b6107d8565b6040516102ff9190611e29565b60405180910390f35b34801561031457600080fd5b5061031d610842565b60405161032a9190611eb6565b60405180910390f35b34801561033f57600080fd5b5061035a60048036038101906103559190612106565b610849565b005b34801561036857600080fd5b50610383600480360381019061037e9190612217565b6108d9565b005b34801561039157600080fd5b506103ac60048036038101906103a79190612314565b610b7a565b005b3480156103ba57600080fd5b506103d560048036038101906103d0919061209c565b610c08565b005b3480156103e357600080fd5b506103fe60048036038101906103f99190611fcd565b610c31565b60405161040c92919061236d565b60405180910390f35b34801561042157600080fd5b5061042a610c55565b60405161043791906123a5565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b357506104b282610c6b565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b6104e1610cd5565b6000806104f48a8a8a8a8a8a8a8a610dbb565b91509150600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105745781341461056f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105669061241d565b60405180910390fd5b6105c4565b600034146105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae90612489565b60405180910390fd5b6105c3818b30856111ab565b5b7fbd231b7fa4103e15e7a238c72f07e8aff310701af121895aa6c793b80245e4338a8a8a8a86866040516105fd969594939291906124b8565b60405180910390a150505050505050505050565b61061a826104ba565b61062b816106266111c3565b6111cb565b6106358383611268565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106666111c3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca9061258b565b60405180910390fd5b6106dd8282611348565b5050565b60006106eb6111c3565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561075c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610753906125f7565b60405180910390fd5b6107696000801b83610611565b6107766000801b8261065e565b5050565b600160189054906101000a900461ffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6108566000801b336107d8565b610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c90612663565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108e66000801b336107d8565b610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091c90612663565b60405180910390fd5b81819050848490501461096d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610964906126cf565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166384db809f876040518263ffffffff1660e01b81526004016109c89190611eb6565b602060405180830381865afa1580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190612704565b905060008173ffffffffffffffffffffffffffffffffffffffff16630a6d55d8886040518263ffffffff1660e01b8152600401610a469190611eb6565b602060405180830381865afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190612704565b905060005b86869050811015610b7057610ae282888884818110610aae57610aad612731565b5b9050602002016020810190610ac39190612106565b878785818110610ad657610ad5612731565b5b90506020020135611429565b7faaa40a232aaf133fdd28f3485f6fdd163514cfadbffa981f3610f42398efe34b82888884818110610b1757610b16612731565b5b9050602002016020810190610b2c9190612106565b878785818110610b3f57610b3e612731565b5b90506020020135604051610b5593929190612760565b60405180910390a18080610b68906127c6565b915050610a8c565b5050505050505050565b610b876000801b336107d8565b610bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd90612663565b60405180910390fd5b81600160146101000a81548163ffffffff021916908363ffffffff16021790555080600160186101000a81548161ffff021916908361ffff1602179055505050565b610c11826104ba565b610c2281610c1d6111c3565b6111cb565b610c2c8383611348565b505050565b600080610c448a8a8a8a8a8a8a8a610dbb565b915091509850989650505050505050565b600160149054906101000a900463ffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d7a57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db090612881565b60405180910390fd5b565b6000806101618484905014610e05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfc906128ed565b60405180910390fd5b610e0d611d54565b6000858560009061010092610e2493929190612917565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050826000018190525085856101009061014192610e8593929190612917565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050826020018190525060008260000151806020019051810190610eea9190612b03565b90508060600151421115610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a90612b7d565b60405180910390fd5b8b60ff16816080015160ff16148015610f5557508a60ff168160a0015160ff16145b8015610f645750898160c00151145b610fa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9a90612be9565b60405180910390fd5b60008360000151805190602001209050610fe4818560200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661143f565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166384db809f8d6040518263ffffffff1660e01b815260040161103f9190611eb6565b602060405180830381865afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110809190612704565b90508073ffffffffffffffffffffffffffffffffffffffff16630a6d55d88d6040518263ffffffff1660e01b81526004016110bb9190611eb6565b602060405180830381865afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc9190612704565b9550670de0b6b3a76400008360200151600160149054906101000a900463ffffffff1663ffffffff1685604001516111349190612c09565b61113e9190612c09565b6111489190612c92565b935060008b8b81019061115b9190612cd8565b9050612710600160189054906101000a900461ffff1661ffff16826111809190612c09565b61118a9190612c92565b975084881015611198578497505b5050505050509850989650505050505050565b60008490506111bc818585856114c1565b5050505050565b600033905090565b6111d582826107d8565b611264576111fa8173ffffffffffffffffffffffffffffffffffffffff16601461154a565b6112088360001c602061154a565b604051602001611219929190612e17565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125b9190612e8a565b60405180910390fd5b5050565b61127282826107d8565b61134457600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506112e96111c3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61135282826107d8565b1561142557600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506113ca6111c3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000839050611439818484611786565b50505050565b600061144b848461180c565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b290612ef8565b60405180910390fd5b50505050565b611544846323b872dd60e01b8585856040516024016114e293929190612760565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611833565b50505050565b60606000600283600261155d9190612c09565b6115679190612f18565b67ffffffffffffffff8111156115805761157f612968565b5b6040519080825280601f01601f1916602001820160405280156115b25781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106115ea576115e9612731565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061164e5761164d612731565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261168e9190612c09565b6116989190612f18565b90505b6001811115611738577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106116da576116d9612731565b5b1a60f81b8282815181106116f1576116f0612731565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061173190612f6e565b905061169b565b506000841461177c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177390612fe4565b60405180910390fd5b8091505092915050565b6118078363a9059cbb60e01b84846040516024016117a5929190613004565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611833565b505050565b600080600061181b8585611990565b9150915061182881611a13565b819250505092915050565b6000823b90506000811161187c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187390613079565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516118a491906130e0565b6000604051808303816000865af19150503d80600081146118e1576040519150601f19603f3d011682016040523d82523d6000602084013e6118e6565b606091505b50915091508161192b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192290613143565b60405180910390fd5b6000815111156119895780806020019051810190611949919061318f565b611988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197f90613208565b60405180910390fd5b5b5050505050565b6000806041835114156119d25760008060006020860151925060408601519150606086015160001a90506119c687828585611be8565b94509450505050611a0c565b604083511415611a035760008060208501519150604085015190506119f8868383611cf5565b935093505050611a0c565b60006002915091505b9250929050565b60006004811115611a2757611a26613228565b5b816004811115611a3a57611a39613228565b5b1415611a4557611be5565b60016004811115611a5957611a58613228565b5b816004811115611a6c57611a6b613228565b5b1415611aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa4906132a3565b60405180910390fd5b60026004811115611ac157611ac0613228565b5b816004811115611ad457611ad3613228565b5b1415611b15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0c9061330f565b60405180910390fd5b60036004811115611b2957611b28613228565b5b816004811115611b3c57611b3b613228565b5b1415611b7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b74906133a1565b60405180910390fd5b600480811115611b9057611b8f613228565b5b816004811115611ba357611ba2613228565b5b1415611be4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdb90613433565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611c23576000600391509150611cec565b601b8560ff1614158015611c3b5750601c8560ff1614155b15611c4d576000600491509150611cec565b600060018787878760405160008152602001604052604051611c729493929190613453565b6020604051602081039080840390855afa158015611c94573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ce357600060019250925050611cec565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c611d389190612f18565b9050611d4687828885611be8565b935093505050935093915050565b60405180606001604052806060815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dbe81611d89565b8114611dc957600080fd5b50565b600081359050611ddb81611db5565b92915050565b600060208284031215611df757611df6611d7f565b5b6000611e0584828501611dcc565b91505092915050565b60008115159050919050565b611e2381611e0e565b82525050565b6000602082019050611e3e6000830184611e1a565b92915050565b6000819050919050565b611e5781611e44565b8114611e6257600080fd5b50565b600081359050611e7481611e4e565b92915050565b600060208284031215611e9057611e8f611d7f565b5b6000611e9e84828501611e65565b91505092915050565b611eb081611e44565b82525050565b6000602082019050611ecb6000830184611ea7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611efc82611ed1565b9050919050565b611f0c81611ef1565b8114611f1757600080fd5b50565b600081359050611f2981611f03565b92915050565b600060ff82169050919050565b611f4581611f2f565b8114611f5057600080fd5b50565b600081359050611f6281611f3c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f8d57611f8c611f68565b5b8235905067ffffffffffffffff811115611faa57611fa9611f6d565b5b602083019150836001820283011115611fc657611fc5611f72565b5b9250929050565b60008060008060008060008060c0898b031215611fed57611fec611d7f565b5b6000611ffb8b828c01611f1a565b985050602061200c8b828c01611f53565b975050604061201d8b828c01611f53565b965050606061202e8b828c01611e65565b955050608089013567ffffffffffffffff81111561204f5761204e611d84565b5b61205b8b828c01611f77565b945094505060a089013567ffffffffffffffff81111561207e5761207d611d84565b5b61208a8b828c01611f77565b92509250509295985092959890939650565b600080604083850312156120b3576120b2611d7f565b5b60006120c185828601611e65565b92505060206120d285828601611f1a565b9150509250929050565b6120e581611ef1565b82525050565b600060208201905061210060008301846120dc565b92915050565b60006020828403121561211c5761211b611d7f565b5b600061212a84828501611f1a565b91505092915050565b600061ffff82169050919050565b61214a81612133565b82525050565b60006020820190506121656000830184612141565b92915050565b60008083601f84011261218157612180611f68565b5b8235905067ffffffffffffffff81111561219e5761219d611f6d565b5b6020830191508360208202830111156121ba576121b9611f72565b5b9250929050565b60008083601f8401126121d7576121d6611f68565b5b8235905067ffffffffffffffff8111156121f4576121f3611f6d565b5b6020830191508360208202830111156122105761220f611f72565b5b9250929050565b60008060008060006060868803121561223357612232611d7f565b5b600061224188828901611e65565b955050602086013567ffffffffffffffff81111561226257612261611d84565b5b61226e8882890161216b565b9450945050604086013567ffffffffffffffff81111561229157612290611d84565b5b61229d888289016121c1565b92509250509295509295909350565b600063ffffffff82169050919050565b6122c5816122ac565b81146122d057600080fd5b50565b6000813590506122e2816122bc565b92915050565b6122f181612133565b81146122fc57600080fd5b50565b60008135905061230e816122e8565b92915050565b6000806040838503121561232b5761232a611d7f565b5b6000612339858286016122d3565b925050602061234a858286016122ff565b9150509250929050565b6000819050919050565b61236781612354565b82525050565b6000604082019050612382600083018561235e565b61238f60208301846120dc565b9392505050565b61239f816122ac565b82525050565b60006020820190506123ba6000830184612396565b92915050565b600082825260208201905092915050565b7f496e636f72726563742066656520737570706c69656400000000000000000000600082015250565b60006124076016836123c0565b9150612412826123d1565b602082019050919050565b60006020820190508181036000830152612436816123fa565b9050919050565b7f636f6c6c6563744665653a206d73672e76616c756520213d2030000000000000600082015250565b6000612473601a836123c0565b915061247e8261243d565b602082019050919050565b600060208201905081810360008301526124a281612466565b9050919050565b6124b281611f2f565b82525050565b600060c0820190506124cd60008301896120dc565b6124da60208301886124a9565b6124e760408301876124a9565b6124f46060830186611ea7565b612501608083018561235e565b61250e60a08301846120dc565b979650505050505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612575602f836123c0565b915061258082612519565b604082019050919050565b600060208201905081810360008301526125a481612568565b9050919050565b7f43616e6e6f742072656e6f756e6365206f6e6573656c66000000000000000000600082015250565b60006125e16017836123c0565b91506125ec826125ab565b602082019050919050565b60006020820190508181036000830152612610816125d4565b9050919050565b7f73656e64657220646f65736e277420686176652061646d696e20726f6c650000600082015250565b600061264d601e836123c0565b915061265882612617565b602082019050919050565b6000602082019050818103600083015261267c81612640565b9050919050565b7f61646472735b5d2c20616d6f756e74735b5d3a2064696666206c656e67746800600082015250565b60006126b9601f836123c0565b91506126c482612683565b602082019050919050565b600060208201905081810360008301526126e8816126ac565b9050919050565b6000815190506126fe81611f03565b92915050565b60006020828403121561271a57612719611d7f565b5b6000612728848285016126ef565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060608201905061277560008301866120dc565b61278260208301856120dc565b61278f604083018461235e565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127d182612354565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561280457612803612797565b5b600182019050919050565b7f73656e646572206d75737420626520627269646765206f722066656520726f7560008201527f74657220636f6e74726163740000000000000000000000000000000000000000602082015250565b600061286b602c836123c0565b91506128768261280f565b604082019050919050565b6000602082019050818103600083015261289a8161285e565b9050919050565b7f496e636f72726563742066656544617461206c656e6774680000000000000000600082015250565b60006128d76018836123c0565b91506128e2826128a1565b602082019050919050565b60006020820190508181036000830152612906816128ca565b9050919050565b600080fd5b600080fd5b6000808585111561292b5761292a61290d565b5b8386111561293c5761293b612912565b5b6001850283019150848603905094509492505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129a082612957565b810181811067ffffffffffffffff821117156129bf576129be612968565b5b80604052505050565b60006129d2611d75565b90506129de8282612997565b919050565b6129ec81612354565b81146129f757600080fd5b50565b600081519050612a09816129e3565b92915050565b600081519050612a1e81611f3c565b92915050565b600081519050612a3381611e4e565b92915050565b60006101008284031215612a5057612a4f612952565b5b612a5b6101006129c8565b90506000612a6b848285016129fa565b6000830152506020612a7f848285016129fa565b6020830152506040612a93848285016129fa565b6040830152506060612aa7848285016129fa565b6060830152506080612abb84828501612a0f565b60808301525060a0612acf84828501612a0f565b60a08301525060c0612ae384828501612a24565b60c08301525060e0612af7848285016129fa565b60e08301525092915050565b60006101008284031215612b1a57612b19611d7f565b5b6000612b2884828501612a39565b91505092915050565b7f4f62736f6c657465206f7261636c652064617461000000000000000000000000600082015250565b6000612b676014836123c0565b9150612b7282612b31565b602082019050919050565b60006020820190508181036000830152612b9681612b5a565b9050919050565b7f496e636f7272656374206465706f73697420706172616d730000000000000000600082015250565b6000612bd36018836123c0565b9150612bde82612b9d565b602082019050919050565b60006020820190508181036000830152612c0281612bc6565b9050919050565b6000612c1482612354565b9150612c1f83612354565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c5857612c57612797565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c9d82612354565b9150612ca883612354565b925082612cb857612cb7612c63565b5b828204905092915050565b600081359050612cd2816129e3565b92915050565b600060208284031215612cee57612ced611d7f565b5b6000612cfc84828501612cc3565b91505092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612d46601783612d05565b9150612d5182612d10565b601782019050919050565b600081519050919050565b60005b83811015612d85578082015181840152602081019050612d6a565b83811115612d94576000848401525b50505050565b6000612da582612d5c565b612daf8185612d05565b9350612dbf818560208601612d67565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612e01601183612d05565b9150612e0c82612dcb565b601182019050919050565b6000612e2282612d39565b9150612e2e8285612d9a565b9150612e3982612df4565b9150612e458284612d9a565b91508190509392505050565b6000612e5c82612d5c565b612e6681856123c0565b9350612e76818560208601612d67565b612e7f81612957565b840191505092915050565b60006020820190508181036000830152612ea48184612e51565b905092915050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612ee26011836123c0565b9150612eed82612eac565b602082019050919050565b60006020820190508181036000830152612f1181612ed5565b9050919050565b6000612f2382612354565b9150612f2e83612354565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f6357612f62612797565b5b828201905092915050565b6000612f7982612354565b91506000821415612f8d57612f8c612797565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612fce6020836123c0565b9150612fd982612f98565b602082019050919050565b60006020820190508181036000830152612ffd81612fc1565b9050919050565b600060408201905061301960008301856120dc565b613026602083018461235e565b9392505050565b7f45524332303a206e6f74206120636f6e74726163740000000000000000000000600082015250565b60006130636015836123c0565b915061306e8261302d565b602082019050919050565b6000602082019050818103600083015261309281613056565b9050919050565b600081519050919050565b600081905092915050565b60006130ba82613099565b6130c481856130a4565b93506130d4818560208601612d67565b80840191505092915050565b60006130ec82846130af565b915081905092915050565b7f45524332303a2063616c6c206661696c65640000000000000000000000000000600082015250565b600061312d6012836123c0565b9150613138826130f7565b602082019050919050565b6000602082019050818103600083015261315c81613120565b9050919050565b61316c81611e0e565b811461317757600080fd5b50565b60008151905061318981613163565b92915050565b6000602082840312156131a5576131a4611d7f565b5b60006131b38482850161317a565b91505092915050565b7f45524332303a206f7065726174696f6e20646964206e6f742073756363656564600082015250565b60006131f26020836123c0565b91506131fd826131bc565b602082019050919050565b60006020820190508181036000830152613221816131e5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061328d6018836123c0565b915061329882613257565b602082019050919050565b600060208201905081810360008301526132bc81613280565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006132f9601f836123c0565b9150613304826132c3565b602082019050919050565b60006020820190508181036000830152613328816132ec565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061338b6022836123c0565b91506133968261332f565b604082019050919050565b600060208201905081810360008301526133ba8161337e565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061341d6022836123c0565b9150613428826133c1565b604082019050919050565b6000602082019050818103600083015261344c81613410565b9050919050565b60006080820190506134686000830187611ea7565b61347560208301866124a9565b6134826040830185611ea7565b61348f6060830184611ea7565b9594505050505056fea26469706673582212205a97b6f74a90949d9e699eb87020fe28947e5c0b3c7c6d9aef25f7835bf67c4264736f6c634300080b0033"

// DeployDynamicFeeHandler deploys a new Ethereum contract, binding an instance of DynamicFeeHandler to it.
func DeployDynamicFeeHandler(auth *bind.TransactOpts, backend bind.ContractBackend, bridgeAddress common.Address, feeHandlerRouterAddress common.Address) (common.Address, *types.Transaction, *DynamicFeeHandler, error) {
	parsed, err := abi.JSON(strings.NewReader(DynamicFeeHandlerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DynamicFeeHandlerBin), backend, bridgeAddress, feeHandlerRouterAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DynamicFeeHandler{DynamicFeeHandlerCaller: DynamicFeeHandlerCaller{contract: contract}, DynamicFeeHandlerTransactor: DynamicFeeHandlerTransactor{contract: contract}, DynamicFeeHandlerFilterer: DynamicFeeHandlerFilterer{contract: contract}}, nil
}

// DynamicFeeHandler is an auto generated Go binding around an Ethereum contract.
type DynamicFeeHandler struct {
	DynamicFeeHandlerCaller     // Read-only binding to the contract
	DynamicFeeHandlerTransactor // Write-only binding to the contract
	DynamicFeeHandlerFilterer   // Log filterer for contract events
}

// DynamicFeeHandlerCaller is an auto generated read-only Go binding around an Ethereum contract.
type DynamicFeeHandlerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DynamicFeeHandlerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DynamicFeeHandlerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DynamicFeeHandlerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DynamicFeeHandlerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DynamicFeeHandlerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DynamicFeeHandlerSession struct {
	Contract     *DynamicFeeHandler // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DynamicFeeHandlerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DynamicFeeHandlerCallerSession struct {
	Contract *DynamicFeeHandlerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// DynamicFeeHandlerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DynamicFeeHandlerTransactorSession struct {
	Contract     *DynamicFeeHandlerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// DynamicFeeHandlerRaw is an auto generated low-level Go binding around an Ethereum contract.
type DynamicFeeHandlerRaw struct {
	Contract *DynamicFeeHandler // Generic contract binding to access the raw methods on
}

// DynamicFeeHandlerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DynamicFeeHandlerCallerRaw struct {
	Contract *DynamicFeeHandlerCaller // Generic read-only contract binding to access the raw methods on
}

// DynamicFeeHandlerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DynamicFeeHandlerTransactorRaw struct {
	Contract *DynamicFeeHandlerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDynamicFeeHandler creates a new instance of DynamicFeeHandler, bound to a specific deployed contract.
func NewDynamicFeeHandler(address common.Address, backend bind.ContractBackend) (*DynamicFeeHandler, error) {
	contract, err := bindDynamicFeeHandler(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DynamicFeeHandler{DynamicFeeHandlerCaller: DynamicFeeHandlerCaller{contract: contract}, DynamicFeeHandlerTransactor: DynamicFeeHandlerTransactor{contract: contract}, DynamicFeeHandlerFilterer: DynamicFeeHandlerFilterer{contract: contract}}, nil
}

// NewDynamicFeeHandlerCaller creates a new read-only instance of DynamicFeeHandler, bound to a specific deployed contract.
func NewDynamicFeeHandlerCaller(address common.Address, caller bind.ContractCaller) (*DynamicFeeHandlerCaller, error) {
	contract, err := bindDynamicFeeHandler(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DynamicFeeHandlerCaller{contract: contract}, nil
}

// NewDynamicFeeHandlerTransactor creates a new write-only instance of DynamicFeeHandler, bound to a specific deployed contract.
func NewDynamicFeeHandlerTransactor(address common.Address, transactor bind.ContractTransactor) (*DynamicFeeHandlerTransactor, error) {
	contract, err := bindDynamicFeeHandler(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DynamicFeeHandlerTransactor{contract: contract}, nil
}

// NewDynamicFeeHandlerFilterer creates a new log filterer instance of DynamicFeeHandler, bound to a specific deployed contract.
func NewDynamicFeeHandlerFilterer(address common.Address, filterer bind.ContractFilterer) (*DynamicFeeHandlerFilterer, error) {
	contract, err := bindDynamicFeeHandler(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DynamicFeeHandlerFilterer{contract: contract}, nil
}

// bindDynamicFeeHandler binds a generic wrapper to an already deployed contract.
func bindDynamicFeeHandler(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DynamicFeeHandlerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DynamicFeeHandler *DynamicFeeHandlerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DynamicFeeHandler.Contract.DynamicFeeHandlerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DynamicFeeHandler *DynamicFeeHandlerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.DynamicFeeHandlerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DynamicFeeHandler *DynamicFeeHandlerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.DynamicFeeHandlerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DynamicFeeHandler *DynamicFeeHandlerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DynamicFeeHandler.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DynamicFeeHandler.Contract.DEFAULTADMINROLE(&_DynamicFeeHandler.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DynamicFeeHandler.Contract.DEFAULTADMINROLE(&_DynamicFeeHandler.CallOpts)
}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) BridgeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "_bridgeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) BridgeAddress() (common.Address, error) {
	return _DynamicFeeHandler.Contract.BridgeAddress(&_DynamicFeeHandler.CallOpts)
}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) BridgeAddress() (common.Address, error) {
	return _DynamicFeeHandler.Contract.BridgeAddress(&_DynamicFeeHandler.CallOpts)
}

// FeeHandlerRouterAddress is a free data retrieval call binding the contract method 0x745e6b61.
//
// Solidity: function _feeHandlerRouterAddress() view returns(address)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) FeeHandlerRouterAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "_feeHandlerRouterAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeHandlerRouterAddress is a free data retrieval call binding the contract method 0x745e6b61.
//
// Solidity: function _feeHandlerRouterAddress() view returns(address)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) FeeHandlerRouterAddress() (common.Address, error) {
	return _DynamicFeeHandler.Contract.FeeHandlerRouterAddress(&_DynamicFeeHandler.CallOpts)
}

// FeeHandlerRouterAddress is a free data retrieval call binding the contract method 0x745e6b61.
//
// Solidity: function _feeHandlerRouterAddress() view returns(address)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) FeeHandlerRouterAddress() (common.Address, error) {
	return _DynamicFeeHandler.Contract.FeeHandlerRouterAddress(&_DynamicFeeHandler.CallOpts)
}

// FeePercent is a free data retrieval call binding the contract method 0x69222948.
//
// Solidity: function _feePercent() view returns(uint16)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) FeePercent(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "_feePercent")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// FeePercent is a free data retrieval call binding the contract method 0x69222948.
//
// Solidity: function _feePercent() view returns(uint16)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) FeePercent() (uint16, error) {
	return _DynamicFeeHandler.Contract.FeePercent(&_DynamicFeeHandler.CallOpts)
}

// FeePercent is a free data retrieval call binding the contract method 0x69222948.
//
// Solidity: function _feePercent() view returns(uint16)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) FeePercent() (uint16, error) {
	return _DynamicFeeHandler.Contract.FeePercent(&_DynamicFeeHandler.CallOpts)
}

// GasUsed is a free data retrieval call binding the contract method 0xfc818cfb.
//
// Solidity: function _gasUsed() view returns(uint32)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) GasUsed(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "_gasUsed")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GasUsed is a free data retrieval call binding the contract method 0xfc818cfb.
//
// Solidity: function _gasUsed() view returns(uint32)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) GasUsed() (uint32, error) {
	return _DynamicFeeHandler.Contract.GasUsed(&_DynamicFeeHandler.CallOpts)
}

// GasUsed is a free data retrieval call binding the contract method 0xfc818cfb.
//
// Solidity: function _gasUsed() view returns(uint32)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) GasUsed() (uint32, error) {
	return _DynamicFeeHandler.Contract.GasUsed(&_DynamicFeeHandler.CallOpts)
}

// OracleAddress is a free data retrieval call binding the contract method 0x6fb7cb57.
//
// Solidity: function _oracleAddress() view returns(address)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) OracleAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "_oracleAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OracleAddress is a free data retrieval call binding the contract method 0x6fb7cb57.
//
// Solidity: function _oracleAddress() view returns(address)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) OracleAddress() (common.Address, error) {
	return _DynamicFeeHandler.Contract.OracleAddress(&_DynamicFeeHandler.CallOpts)
}

// OracleAddress is a free data retrieval call binding the contract method 0x6fb7cb57.
//
// Solidity: function _oracleAddress() view returns(address)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) OracleAddress() (common.Address, error) {
	return _DynamicFeeHandler.Contract.OracleAddress(&_DynamicFeeHandler.CallOpts)
}

// CalculateFee is a free data retrieval call binding the contract method 0xef4f081f.
//
// Solidity: function calculateFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) view returns(uint256 fee, address tokenAddress)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) CalculateFee(opts *bind.CallOpts, sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (struct {
	Fee          *big.Int
	TokenAddress common.Address
}, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "calculateFee", sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)

	outstruct := new(struct {
		Fee          *big.Int
		TokenAddress common.Address
	})

	outstruct.Fee = out[0].(*big.Int)
	outstruct.TokenAddress = out[1].(common.Address)

	return *outstruct, err

}

// CalculateFee is a free data retrieval call binding the contract method 0xef4f081f.
//
// Solidity: function calculateFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) view returns(uint256 fee, address tokenAddress)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) CalculateFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (struct {
	Fee          *big.Int
	TokenAddress common.Address
}, error) {
	return _DynamicFeeHandler.Contract.CalculateFee(&_DynamicFeeHandler.CallOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// CalculateFee is a free data retrieval call binding the contract method 0xef4f081f.
//
// Solidity: function calculateFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) view returns(uint256 fee, address tokenAddress)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) CalculateFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (struct {
	Fee          *big.Int
	TokenAddress common.Address
}, error) {
	return _DynamicFeeHandler.Contract.CalculateFee(&_DynamicFeeHandler.CallOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DynamicFeeHandler.Contract.GetRoleAdmin(&_DynamicFeeHandler.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DynamicFeeHandler.Contract.GetRoleAdmin(&_DynamicFeeHandler.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DynamicFeeHandler.Contract.HasRole(&_DynamicFeeHandler.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DynamicFeeHandler.Contract.HasRole(&_DynamicFeeHandler.CallOpts, role, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DynamicFeeHandler *DynamicFeeHandlerCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DynamicFeeHandler.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DynamicFeeHandler *DynamicFeeHandlerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DynamicFeeHandler.Contract.SupportsInterface(&_DynamicFeeHandler.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DynamicFeeHandler *DynamicFeeHandlerCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DynamicFeeHandler.Contract.SupportsInterface(&_DynamicFeeHandler.CallOpts, interfaceId)
}

// CollectFee is a paid mutator transaction binding the contract method 0x25307065.
//
// Solidity: function collectFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactor) CollectFee(opts *bind.TransactOpts, sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _DynamicFeeHandler.contract.Transact(opts, "collectFee", sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// CollectFee is a paid mutator transaction binding the contract method 0x25307065.
//
// Solidity: function collectFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_DynamicFeeHandler *DynamicFeeHandlerSession) CollectFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.CollectFee(&_DynamicFeeHandler.TransactOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// CollectFee is a paid mutator transaction binding the contract method 0x25307065.
//
// Solidity: function collectFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorSession) CollectFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.CollectFee(&_DynamicFeeHandler.TransactOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.GrantRole(&_DynamicFeeHandler.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.GrantRole(&_DynamicFeeHandler.TransactOpts, role, account)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactor) RenounceAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.contract.Transact(opts, "renounceAdmin", newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.RenounceAdmin(&_DynamicFeeHandler.TransactOpts, newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.RenounceAdmin(&_DynamicFeeHandler.TransactOpts, newAdmin)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.RenounceRole(&_DynamicFeeHandler.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.RenounceRole(&_DynamicFeeHandler.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.RevokeRole(&_DynamicFeeHandler.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.RevokeRole(&_DynamicFeeHandler.TransactOpts, role, account)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address oracleAddress) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactor) SetFeeOracle(opts *bind.TransactOpts, oracleAddress common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.contract.Transact(opts, "setFeeOracle", oracleAddress)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address oracleAddress) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerSession) SetFeeOracle(oracleAddress common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.SetFeeOracle(&_DynamicFeeHandler.TransactOpts, oracleAddress)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address oracleAddress) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorSession) SetFeeOracle(oracleAddress common.Address) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.SetFeeOracle(&_DynamicFeeHandler.TransactOpts, oracleAddress)
}

// SetFeeProperties is a paid mutator transaction binding the contract method 0xc297983f.
//
// Solidity: function setFeeProperties(uint32 gasUsed, uint16 feePercent) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactor) SetFeeProperties(opts *bind.TransactOpts, gasUsed uint32, feePercent uint16) (*types.Transaction, error) {
	return _DynamicFeeHandler.contract.Transact(opts, "setFeeProperties", gasUsed, feePercent)
}

// SetFeeProperties is a paid mutator transaction binding the contract method 0xc297983f.
//
// Solidity: function setFeeProperties(uint32 gasUsed, uint16 feePercent) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerSession) SetFeeProperties(gasUsed uint32, feePercent uint16) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.SetFeeProperties(&_DynamicFeeHandler.TransactOpts, gasUsed, feePercent)
}

// SetFeeProperties is a paid mutator transaction binding the contract method 0xc297983f.
//
// Solidity: function setFeeProperties(uint32 gasUsed, uint16 feePercent) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorSession) SetFeeProperties(gasUsed uint32, feePercent uint16) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.SetFeeProperties(&_DynamicFeeHandler.TransactOpts, gasUsed, feePercent)
}

// TransferFee is a paid mutator transaction binding the contract method 0xbff42755.
//
// Solidity: function transferFee(bytes32 resourceID, address[] addrs, uint256[] amounts) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactor) TransferFee(opts *bind.TransactOpts, resourceID [32]byte, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _DynamicFeeHandler.contract.Transact(opts, "transferFee", resourceID, addrs, amounts)
}

// TransferFee is a paid mutator transaction binding the contract method 0xbff42755.
//
// Solidity: function transferFee(bytes32 resourceID, address[] addrs, uint256[] amounts) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerSession) TransferFee(resourceID [32]byte, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.TransferFee(&_DynamicFeeHandler.TransactOpts, resourceID, addrs, amounts)
}

// TransferFee is a paid mutator transaction binding the contract method 0xbff42755.
//
// Solidity: function transferFee(bytes32 resourceID, address[] addrs, uint256[] amounts) returns()
func (_DynamicFeeHandler *DynamicFeeHandlerTransactorSession) TransferFee(resourceID [32]byte, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _DynamicFeeHandler.Contract.TransferFee(&_DynamicFeeHandler.TransactOpts, resourceID, addrs, amounts)
}

// DynamicFeeHandlerFeeCollectedIterator is returned from FilterFeeCollected and is used to iterate over the raw logs and unpacked data for FeeCollected events raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerFeeCollectedIterator struct {
	Event *DynamicFeeHandlerFeeCollected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicFeeHandlerFeeCollectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicFeeHandlerFeeCollected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicFeeHandlerFeeCollected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicFeeHandlerFeeCollectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicFeeHandlerFeeCollectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicFeeHandlerFeeCollected represents a FeeCollected event raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerFeeCollected struct {
	Sender              common.Address
	FromDomainID        uint8
	DestinationDomainID uint8
	ResourceID          [32]byte
	Fee                 *big.Int
	TokenAddress        common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterFeeCollected is a free log retrieval operation binding the contract event 0xbd231b7fa4103e15e7a238c72f07e8aff310701af121895aa6c793b80245e433.
//
// Solidity: event FeeCollected(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, uint256 fee, address tokenAddress)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) FilterFeeCollected(opts *bind.FilterOpts) (*DynamicFeeHandlerFeeCollectedIterator, error) {

	logs, sub, err := _DynamicFeeHandler.contract.FilterLogs(opts, "FeeCollected")
	if err != nil {
		return nil, err
	}
	return &DynamicFeeHandlerFeeCollectedIterator{contract: _DynamicFeeHandler.contract, event: "FeeCollected", logs: logs, sub: sub}, nil
}

// WatchFeeCollected is a free log subscription operation binding the contract event 0xbd231b7fa4103e15e7a238c72f07e8aff310701af121895aa6c793b80245e433.
//
// Solidity: event FeeCollected(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, uint256 fee, address tokenAddress)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) WatchFeeCollected(opts *bind.WatchOpts, sink chan<- *DynamicFeeHandlerFeeCollected) (event.Subscription, error) {

	logs, sub, err := _DynamicFeeHandler.contract.WatchLogs(opts, "FeeCollected")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicFeeHandlerFeeCollected)
				if err := _DynamicFeeHandler.contract.UnpackLog(event, "FeeCollected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeCollected is a log parse operation binding the contract event 0xbd231b7fa4103e15e7a238c72f07e8aff310701af121895aa6c793b80245e433.
//
// Solidity: event FeeCollected(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, uint256 fee, address tokenAddress)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) ParseFeeCollected(log types.Log) (*DynamicFeeHandlerFeeCollected, error) {
	event := new(DynamicFeeHandlerFeeCollected)
	if err := _DynamicFeeHandler.contract.UnpackLog(event, "FeeCollected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DynamicFeeHandlerFeeDistributedIterator is returned from FilterFeeDistributed and is used to iterate over the raw logs and unpacked data for FeeDistributed events raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerFeeDistributedIterator struct {
	Event *DynamicFeeHandlerFeeDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicFeeHandlerFeeDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicFeeHandlerFeeDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicFeeHandlerFeeDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicFeeHandlerFeeDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicFeeHandlerFeeDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicFeeHandlerFeeDistributed represents a FeeDistributed event raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerFeeDistributed struct {
	TokenAddress common.Address
	Recipient    common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFeeDistributed is a free log retrieval operation binding the contract event 0xaaa40a232aaf133fdd28f3485f6fdd163514cfadbffa981f3610f42398efe34b.
//
// Solidity: event FeeDistributed(address tokenAddress, address recipient, uint256 amount)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) FilterFeeDistributed(opts *bind.FilterOpts) (*DynamicFeeHandlerFeeDistributedIterator, error) {

	logs, sub, err := _DynamicFeeHandler.contract.FilterLogs(opts, "FeeDistributed")
	if err != nil {
		return nil, err
	}
	return &DynamicFeeHandlerFeeDistributedIterator{contract: _DynamicFeeHandler.contract, event: "FeeDistributed", logs: logs, sub: sub}, nil
}

// WatchFeeDistributed is a free log subscription operation binding the contract event 0xaaa40a232aaf133fdd28f3485f6fdd163514cfadbffa981f3610f42398efe34b.
//
// Solidity: event FeeDistributed(address tokenAddress, address recipient, uint256 amount)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) WatchFeeDistributed(opts *bind.WatchOpts, sink chan<- *DynamicFeeHandlerFeeDistributed) (event.Subscription, error) {

	logs, sub, err := _DynamicFeeHandler.contract.WatchLogs(opts, "FeeDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicFeeHandlerFeeDistributed)
				if err := _DynamicFeeHandler.contract.UnpackLog(event, "FeeDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeDistributed is a log parse operation binding the contract event 0xaaa40a232aaf133fdd28f3485f6fdd163514cfadbffa981f3610f42398efe34b.
//
// Solidity: event FeeDistributed(address tokenAddress, address recipient, uint256 amount)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) ParseFeeDistributed(log types.Log) (*DynamicFeeHandlerFeeDistributed, error) {
	event := new(DynamicFeeHandlerFeeDistributed)
	if err := _DynamicFeeHandler.contract.UnpackLog(event, "FeeDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DynamicFeeHandlerRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerRoleAdminChangedIterator struct {
	Event *DynamicFeeHandlerRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicFeeHandlerRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicFeeHandlerRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicFeeHandlerRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicFeeHandlerRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicFeeHandlerRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicFeeHandlerRoleAdminChanged represents a RoleAdminChanged event raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*DynamicFeeHandlerRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DynamicFeeHandler.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &DynamicFeeHandlerRoleAdminChangedIterator{contract: _DynamicFeeHandler.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *DynamicFeeHandlerRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DynamicFeeHandler.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicFeeHandlerRoleAdminChanged)
				if err := _DynamicFeeHandler.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) ParseRoleAdminChanged(log types.Log) (*DynamicFeeHandlerRoleAdminChanged, error) {
	event := new(DynamicFeeHandlerRoleAdminChanged)
	if err := _DynamicFeeHandler.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DynamicFeeHandlerRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerRoleGrantedIterator struct {
	Event *DynamicFeeHandlerRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicFeeHandlerRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicFeeHandlerRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicFeeHandlerRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicFeeHandlerRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicFeeHandlerRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicFeeHandlerRoleGranted represents a RoleGranted event raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DynamicFeeHandlerRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DynamicFeeHandler.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DynamicFeeHandlerRoleGrantedIterator{contract: _DynamicFeeHandler.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *DynamicFeeHandlerRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DynamicFeeHandler.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicFeeHandlerRoleGranted)
				if err := _DynamicFeeHandler.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) ParseRoleGranted(log types.Log) (*DynamicFeeHandlerRoleGranted, error) {
	event := new(DynamicFeeHandlerRoleGranted)
	if err := _DynamicFeeHandler.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DynamicFeeHandlerRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerRoleRevokedIterator struct {
	Event *DynamicFeeHandlerRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicFeeHandlerRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicFeeHandlerRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicFeeHandlerRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicFeeHandlerRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicFeeHandlerRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicFeeHandlerRoleRevoked represents a RoleRevoked event raised by the DynamicFeeHandler contract.
type DynamicFeeHandlerRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DynamicFeeHandlerRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DynamicFeeHandler.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DynamicFeeHandlerRoleRevokedIterator{contract: _DynamicFeeHandler.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *DynamicFeeHandlerRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DynamicFeeHandler.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicFeeHandlerRoleRevoked)
				if err := _DynamicFeeHandler.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DynamicFeeHandler *DynamicFeeHandlerFilterer) ParseRoleRevoked(log types.Log) (*DynamicFeeHandlerRoleRevoked, error) {
	event := new(DynamicFeeHandlerRoleRevoked)
	if err := _DynamicFeeHandler.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
