// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feeHandler

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FeeHandlerMetaData contains all meta data concerning the FeeHandler contract.
var FeeHandlerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeHandlerRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fromDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeHandlerRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gasUsed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"setFeeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"gasUsed\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"feePercent\",\"type\":\"uint16\"}],\"name\":\"setFeeProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b506040516200377b3803806200377b83398181016040528101906200003791906200029f565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050620000b46000801b33620000bc60201b60201c565b5050620002e6565b620000ce8282620000d260201b60201c565b5050565b620000e48282620001c360201b60201c565b620001bf57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001646200022d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000267826200023a565b9050919050565b62000279816200025a565b81146200028557600080fd5b50565b60008151905062000299816200026e565b92915050565b60008060408385031215620002b957620002b862000235565b5b6000620002c98582860162000288565b9250506020620002dc8582860162000288565b9150509250929050565b60805160a05161345362000328600039600081816107390152610caf0152600081816105bf015281816108f401528181610c5a0152610f9501526134536000f3fe6080604052600436106101095760003560e01c8063745e6b6111610095578063bff4275511610064578063bff427551461035c578063c297983f14610385578063d547741f146103ae578063ef4f081f146103d7578063fc818cfb1461041557610109565b8063745e6b61146102a057806391d14854146102cb578063a217fddf14610308578063a8a989621461033357610109565b8063318c136e116100dc578063318c136e146101cd57806336568abe146101f85780635e1fab0f14610221578063692229481461024a5780636fb7cb571461027557610109565b806301ffc9a71461010e578063248a9ca31461014b57806325307065146101885780632f2ff15d146101a4575b600080fd5b34801561011a57600080fd5b5061013560048036038101906101309190611dd2565b610440565b6040516101429190611e1a565b60405180910390f35b34801561015757600080fd5b50610172600480360381019061016d9190611e6b565b6104ba565b60405161017f9190611ea7565b60405180910390f35b6101a2600480360381019061019d9190611fbe565b6104d9565b005b3480156101b057600080fd5b506101cb60048036038101906101c6919061208d565b610594565b005b3480156101d957600080fd5b506101e26105bd565b6040516101ef91906120dc565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a919061208d565b6105e1565b005b34801561022d57600080fd5b50610248600480360381019061024391906120f7565b610664565b005b34801561025657600080fd5b5061025f6106fd565b60405161026c9190612141565b60405180910390f35b34801561028157600080fd5b5061028a610711565b60405161029791906120dc565b60405180910390f35b3480156102ac57600080fd5b506102b5610737565b6040516102c291906120dc565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed919061208d565b61075b565b6040516102ff9190611e1a565b60405180910390f35b34801561031457600080fd5b5061031d6107c5565b60405161032a9190611ea7565b60405180910390f35b34801561033f57600080fd5b5061035a600480360381019061035591906120f7565b6107cc565b005b34801561036857600080fd5b50610383600480360381019061037e9190612208565b61085c565b005b34801561039157600080fd5b506103ac60048036038101906103a79190612305565b610afd565b005b3480156103ba57600080fd5b506103d560048036038101906103d0919061208d565b610b8b565b005b3480156103e357600080fd5b506103fe60048036038101906103f99190611fbe565b610bb4565b60405161040c92919061235e565b60405180910390f35b34801561042157600080fd5b5061042a610bd8565b6040516104379190612396565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b357506104b282610bee565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b6104e1610c58565b60003414610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b9061240e565b60405180910390fd5b6000806105378a8a8a8a8a8a8a8a610d3e565b91509150610547818b308561119c565b7fbd231b7fa4103e15e7a238c72f07e8aff310701af121895aa6c793b80245e4338a8a8a8a86866040516105809695949392919061243d565b60405180910390a150505050505050505050565b61059d826104ba565b6105ae816105a96111b4565b6111bc565b6105b88383611259565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6105e96111b4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064d90612510565b60405180910390fd5b6106608282611339565b5050565b600061066e6111b4565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d69061257c565b60405180910390fd5b6106ec6000801b83610594565b6106f96000801b826105e1565b5050565b600160189054906101000a900461ffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6107d96000801b3361075b565b610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080f906125e8565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108696000801b3361075b565b6108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f906125e8565b60405180910390fd5b8181905084849050146108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e790612654565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166384db809f876040518263ffffffff1660e01b815260040161094b9190611ea7565b602060405180830381865afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190612689565b905060008173ffffffffffffffffffffffffffffffffffffffff16630a6d55d8886040518263ffffffff1660e01b81526004016109c99190611ea7565b602060405180830381865afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190612689565b905060005b86869050811015610af357610a6582888884818110610a3157610a306126b6565b5b9050602002016020810190610a4691906120f7565b878785818110610a5957610a586126b6565b5b9050602002013561141a565b7faaa40a232aaf133fdd28f3485f6fdd163514cfadbffa981f3610f42398efe34b82888884818110610a9a57610a996126b6565b5b9050602002016020810190610aaf91906120f7565b878785818110610ac257610ac16126b6565b5b90506020020135604051610ad8939291906126e5565b60405180910390a18080610aeb9061274b565b915050610a0f565b5050505050505050565b610b0a6000801b3361075b565b610b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b40906125e8565b60405180910390fd5b81600160146101000a81548163ffffffff021916908363ffffffff16021790555080600160186101000a81548161ffff021916908361ffff1602179055505050565b610b94826104ba565b610ba581610ba06111b4565b6111bc565b610baf8383611339565b505050565b600080610bc78a8a8a8a8a8a8a8a610d3e565b915091509850989650505050505050565b600160149054906101000a900463ffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610cfd57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3390612806565b60405180910390fd5b565b6000806101618484905014610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90612872565b60405180910390fd5b610d90611d45565b6000858560009061010092610da79392919061289c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050826000018190525085856101009061014192610e089392919061289c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082602001819052508585610141908092610e679392919061289c565b810190610e749190612903565b82604001818152505060008260000151806020019051810190610e979190612aca565b90508060600151421115610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790612b44565b60405180910390fd5b8b60ff16816080015160ff16148015610f0257508a60ff168160a0015160ff16145b8015610f115750898160c00151145b610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4790612bb0565b60405180910390fd5b60008360000151805190602001209050610f91818560200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611430565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166384db809f8d6040518263ffffffff1660e01b8152600401610fec9190611ea7565b602060405180830381865afa158015611009573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102d9190612689565b905060008173ffffffffffffffffffffffffffffffffffffffff16630a6d55d88e6040518263ffffffff1660e01b815260040161106a9190611ea7565b602060405180830381865afa158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab9190612689565b905060008460e0015111156110f757670de0b6b3a764000084600001518560e0015186604001516110dc9190612bd0565b6110e69190612bd0565b6110f09190612c59565b9450611144565b670de0b6b3a76400008460200151600160149054906101000a900463ffffffff1663ffffffff16866040015161112d9190612bd0565b6111379190612bd0565b6111419190612c59565b94505b612710600160189054906101000a900461ffff1661ffff16876040015161116b9190612bd0565b6111759190612c59565b975084881015611183578497505b8781975097505050505050509850989650505050505050565b60008490506111ad818585856114b2565b5050505050565b600033905090565b6111c6828261075b565b611255576111eb8173ffffffffffffffffffffffffffffffffffffffff16601461153b565b6111f98360001c602061153b565b60405160200161120a929190612d9c565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124c9190612e0f565b60405180910390fd5b5050565b611263828261075b565b61133557600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506112da6111b4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611343828261075b565b1561141657600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506113bb6111b4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600083905061142a818484611777565b50505050565b600061143c84846117fd565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a390612e7d565b60405180910390fd5b50505050565b611535846323b872dd60e01b8585856040516024016114d3939291906126e5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611824565b50505050565b60606000600283600261154e9190612bd0565b6115589190612e9d565b67ffffffffffffffff81111561157157611570612946565b5b6040519080825280601f01601f1916602001820160405280156115a35781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106115db576115da6126b6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061163f5761163e6126b6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261167f9190612bd0565b6116899190612e9d565b90505b6001811115611729577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106116cb576116ca6126b6565b5b1a60f81b8282815181106116e2576116e16126b6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061172290612ef3565b905061168c565b506000841461176d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176490612f69565b60405180910390fd5b8091505092915050565b6117f88363a9059cbb60e01b8484604051602401611796929190612f89565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611824565b505050565b600080600061180c8585611981565b9150915061181981611a04565b819250505092915050565b6000823b90506000811161186d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186490612ffe565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516118959190613065565b6000604051808303816000865af19150503d80600081146118d2576040519150601f19603f3d011682016040523d82523d6000602084013e6118d7565b606091505b50915091508161191c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611913906130c8565b60405180910390fd5b60008151111561197a578080602001905181019061193a9190613114565b611979576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119709061318d565b60405180910390fd5b5b5050505050565b6000806041835114156119c35760008060006020860151925060408601519150606086015160001a90506119b787828585611bd9565b945094505050506119fd565b6040835114156119f45760008060208501519150604085015190506119e9868383611ce6565b9350935050506119fd565b60006002915091505b9250929050565b60006004811115611a1857611a176131ad565b5b816004811115611a2b57611a2a6131ad565b5b1415611a3657611bd6565b60016004811115611a4a57611a496131ad565b5b816004811115611a5d57611a5c6131ad565b5b1415611a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9590613228565b60405180910390fd5b60026004811115611ab257611ab16131ad565b5b816004811115611ac557611ac46131ad565b5b1415611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd90613294565b60405180910390fd5b60036004811115611b1a57611b196131ad565b5b816004811115611b2d57611b2c6131ad565b5b1415611b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6590613326565b60405180910390fd5b600480811115611b8157611b806131ad565b5b816004811115611b9457611b936131ad565b5b1415611bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bcc906133b8565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611c14576000600391509150611cdd565b601b8560ff1614158015611c2c5750601c8560ff1614155b15611c3e576000600491509150611cdd565b600060018787878760405160008152602001604052604051611c6394939291906133d8565b6020604051602081039080840390855afa158015611c85573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cd457600060019250925050611cdd565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c611d299190612e9d565b9050611d3787828885611bd9565b935093505050935093915050565b60405180606001604052806060815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611daf81611d7a565b8114611dba57600080fd5b50565b600081359050611dcc81611da6565b92915050565b600060208284031215611de857611de7611d70565b5b6000611df684828501611dbd565b91505092915050565b60008115159050919050565b611e1481611dff565b82525050565b6000602082019050611e2f6000830184611e0b565b92915050565b6000819050919050565b611e4881611e35565b8114611e5357600080fd5b50565b600081359050611e6581611e3f565b92915050565b600060208284031215611e8157611e80611d70565b5b6000611e8f84828501611e56565b91505092915050565b611ea181611e35565b82525050565b6000602082019050611ebc6000830184611e98565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611eed82611ec2565b9050919050565b611efd81611ee2565b8114611f0857600080fd5b50565b600081359050611f1a81611ef4565b92915050565b600060ff82169050919050565b611f3681611f20565b8114611f4157600080fd5b50565b600081359050611f5381611f2d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f7e57611f7d611f59565b5b8235905067ffffffffffffffff811115611f9b57611f9a611f5e565b5b602083019150836001820283011115611fb757611fb6611f63565b5b9250929050565b60008060008060008060008060c0898b031215611fde57611fdd611d70565b5b6000611fec8b828c01611f0b565b9850506020611ffd8b828c01611f44565b975050604061200e8b828c01611f44565b965050606061201f8b828c01611e56565b955050608089013567ffffffffffffffff8111156120405761203f611d75565b5b61204c8b828c01611f68565b945094505060a089013567ffffffffffffffff81111561206f5761206e611d75565b5b61207b8b828c01611f68565b92509250509295985092959890939650565b600080604083850312156120a4576120a3611d70565b5b60006120b285828601611e56565b92505060206120c385828601611f0b565b9150509250929050565b6120d681611ee2565b82525050565b60006020820190506120f160008301846120cd565b92915050565b60006020828403121561210d5761210c611d70565b5b600061211b84828501611f0b565b91505092915050565b600061ffff82169050919050565b61213b81612124565b82525050565b60006020820190506121566000830184612132565b92915050565b60008083601f84011261217257612171611f59565b5b8235905067ffffffffffffffff81111561218f5761218e611f5e565b5b6020830191508360208202830111156121ab576121aa611f63565b5b9250929050565b60008083601f8401126121c8576121c7611f59565b5b8235905067ffffffffffffffff8111156121e5576121e4611f5e565b5b60208301915083602082028301111561220157612200611f63565b5b9250929050565b60008060008060006060868803121561222457612223611d70565b5b600061223288828901611e56565b955050602086013567ffffffffffffffff81111561225357612252611d75565b5b61225f8882890161215c565b9450945050604086013567ffffffffffffffff81111561228257612281611d75565b5b61228e888289016121b2565b92509250509295509295909350565b600063ffffffff82169050919050565b6122b68161229d565b81146122c157600080fd5b50565b6000813590506122d3816122ad565b92915050565b6122e281612124565b81146122ed57600080fd5b50565b6000813590506122ff816122d9565b92915050565b6000806040838503121561231c5761231b611d70565b5b600061232a858286016122c4565b925050602061233b858286016122f0565b9150509250929050565b6000819050919050565b61235881612345565b82525050565b6000604082019050612373600083018561234f565b61238060208301846120cd565b9392505050565b6123908161229d565b82525050565b60006020820190506123ab6000830184612387565b92915050565b600082825260208201905092915050565b7f636f6c6c6563744665653a206d73672e76616c756520213d2030000000000000600082015250565b60006123f8601a836123b1565b9150612403826123c2565b602082019050919050565b60006020820190508181036000830152612427816123eb565b9050919050565b61243781611f20565b82525050565b600060c08201905061245260008301896120cd565b61245f602083018861242e565b61246c604083018761242e565b6124796060830186611e98565b612486608083018561234f565b61249360a08301846120cd565b979650505050505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006124fa602f836123b1565b91506125058261249e565b604082019050919050565b60006020820190508181036000830152612529816124ed565b9050919050565b7f43616e6e6f742072656e6f756e6365206f6e6573656c66000000000000000000600082015250565b60006125666017836123b1565b915061257182612530565b602082019050919050565b6000602082019050818103600083015261259581612559565b9050919050565b7f73656e64657220646f65736e277420686176652061646d696e20726f6c650000600082015250565b60006125d2601e836123b1565b91506125dd8261259c565b602082019050919050565b60006020820190508181036000830152612601816125c5565b9050919050565b7f61646472735b5d2c20616d6f756e74735b5d3a2064696666206c656e67746800600082015250565b600061263e601f836123b1565b915061264982612608565b602082019050919050565b6000602082019050818103600083015261266d81612631565b9050919050565b60008151905061268381611ef4565b92915050565b60006020828403121561269f5761269e611d70565b5b60006126ad84828501612674565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006060820190506126fa60008301866120cd565b61270760208301856120cd565b612714604083018461234f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061275682612345565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127895761278861271c565b5b600182019050919050565b7f73656e646572206d75737420626520627269646765206f722066656520726f7560008201527f74657220636f6e74726163740000000000000000000000000000000000000000602082015250565b60006127f0602c836123b1565b91506127fb82612794565b604082019050919050565b6000602082019050818103600083015261281f816127e3565b9050919050565b7f496e636f72726563742066656544617461206c656e6774680000000000000000600082015250565b600061285c6018836123b1565b915061286782612826565b602082019050919050565b6000602082019050818103600083015261288b8161284f565b9050919050565b600080fd5b600080fd5b600080858511156128b0576128af612892565b5b838611156128c1576128c0612897565b5b6001850283019150848603905094509492505050565b6128e081612345565b81146128eb57600080fd5b50565b6000813590506128fd816128d7565b92915050565b60006020828403121561291957612918611d70565b5b6000612927848285016128ee565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61297e82612935565b810181811067ffffffffffffffff8211171561299d5761299c612946565b5b80604052505050565b60006129b0611d66565b90506129bc8282612975565b919050565b6000815190506129d0816128d7565b92915050565b6000815190506129e581611f2d565b92915050565b6000815190506129fa81611e3f565b92915050565b60006101008284031215612a1757612a16612930565b5b612a226101006129a6565b90506000612a32848285016129c1565b6000830152506020612a46848285016129c1565b6020830152506040612a5a848285016129c1565b6040830152506060612a6e848285016129c1565b6060830152506080612a82848285016129d6565b60808301525060a0612a96848285016129d6565b60a08301525060c0612aaa848285016129eb565b60c08301525060e0612abe848285016129c1565b60e08301525092915050565b60006101008284031215612ae157612ae0611d70565b5b6000612aef84828501612a00565b91505092915050565b7f4f62736f6c657465206f7261636c652064617461000000000000000000000000600082015250565b6000612b2e6014836123b1565b9150612b3982612af8565b602082019050919050565b60006020820190508181036000830152612b5d81612b21565b9050919050565b7f496e636f7272656374206465706f73697420706172616d730000000000000000600082015250565b6000612b9a6018836123b1565b9150612ba582612b64565b602082019050919050565b60006020820190508181036000830152612bc981612b8d565b9050919050565b6000612bdb82612345565b9150612be683612345565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c1f57612c1e61271c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c6482612345565b9150612c6f83612345565b925082612c7f57612c7e612c2a565b5b828204905092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612ccb601783612c8a565b9150612cd682612c95565b601782019050919050565b600081519050919050565b60005b83811015612d0a578082015181840152602081019050612cef565b83811115612d19576000848401525b50505050565b6000612d2a82612ce1565b612d348185612c8a565b9350612d44818560208601612cec565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612d86601183612c8a565b9150612d9182612d50565b601182019050919050565b6000612da782612cbe565b9150612db38285612d1f565b9150612dbe82612d79565b9150612dca8284612d1f565b91508190509392505050565b6000612de182612ce1565b612deb81856123b1565b9350612dfb818560208601612cec565b612e0481612935565b840191505092915050565b60006020820190508181036000830152612e298184612dd6565b905092915050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612e676011836123b1565b9150612e7282612e31565b602082019050919050565b60006020820190508181036000830152612e9681612e5a565b9050919050565b6000612ea882612345565b9150612eb383612345565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ee857612ee761271c565b5b828201905092915050565b6000612efe82612345565b91506000821415612f1257612f1161271c565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612f536020836123b1565b9150612f5e82612f1d565b602082019050919050565b60006020820190508181036000830152612f8281612f46565b9050919050565b6000604082019050612f9e60008301856120cd565b612fab602083018461234f565b9392505050565b7f45524332303a206e6f74206120636f6e74726163740000000000000000000000600082015250565b6000612fe86015836123b1565b9150612ff382612fb2565b602082019050919050565b6000602082019050818103600083015261301781612fdb565b9050919050565b600081519050919050565b600081905092915050565b600061303f8261301e565b6130498185613029565b9350613059818560208601612cec565b80840191505092915050565b60006130718284613034565b915081905092915050565b7f45524332303a2063616c6c206661696c65640000000000000000000000000000600082015250565b60006130b26012836123b1565b91506130bd8261307c565b602082019050919050565b600060208201905081810360008301526130e1816130a5565b9050919050565b6130f181611dff565b81146130fc57600080fd5b50565b60008151905061310e816130e8565b92915050565b60006020828403121561312a57613129611d70565b5b6000613138848285016130ff565b91505092915050565b7f45524332303a206f7065726174696f6e20646964206e6f742073756363656564600082015250565b60006131776020836123b1565b915061318282613141565b602082019050919050565b600060208201905081810360008301526131a68161316a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006132126018836123b1565b915061321d826131dc565b602082019050919050565b6000602082019050818103600083015261324181613205565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061327e601f836123b1565b915061328982613248565b602082019050919050565b600060208201905081810360008301526132ad81613271565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006133106022836123b1565b915061331b826132b4565b604082019050919050565b6000602082019050818103600083015261333f81613303565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006133a26022836123b1565b91506133ad82613346565b604082019050919050565b600060208201905081810360008301526133d181613395565b9050919050565b60006080820190506133ed6000830187611e98565b6133fa602083018661242e565b6134076040830185611e98565b6134146060830184611e98565b9594505050505056fea2646970667358221220929051295a6c18382d9520ab00bfa715e10ec4574fe5e0159801d17712c9ec2364736f6c634300080b0033",
}

// FeeHandlerABI is the input ABI used to generate the binding from.
// Deprecated: Use FeeHandlerMetaData.ABI instead.
var FeeHandlerABI = FeeHandlerMetaData.ABI

// FeeHandlerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FeeHandlerMetaData.Bin instead.
var FeeHandlerBin = FeeHandlerMetaData.Bin

// DeployFeeHandler deploys a new Ethereum contract, binding an instance of FeeHandler to it.
func DeployFeeHandler(auth *bind.TransactOpts, backend bind.ContractBackend, bridgeAddress common.Address, feeHandlerRouterAddress common.Address) (common.Address, *types.Transaction, *FeeHandler, error) {
	parsed, err := FeeHandlerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FeeHandlerBin), backend, bridgeAddress, feeHandlerRouterAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeeHandler{FeeHandlerCaller: FeeHandlerCaller{contract: contract}, FeeHandlerTransactor: FeeHandlerTransactor{contract: contract}, FeeHandlerFilterer: FeeHandlerFilterer{contract: contract}}, nil
}

// FeeHandler is an auto generated Go binding around an Ethereum contract.
type FeeHandler struct {
	FeeHandlerCaller     // Read-only binding to the contract
	FeeHandlerTransactor // Write-only binding to the contract
	FeeHandlerFilterer   // Log filterer for contract events
}

// FeeHandlerCaller is an auto generated read-only Go binding around an Ethereum contract.
type FeeHandlerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeHandlerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FeeHandlerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeHandlerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeeHandlerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeHandlerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeeHandlerSession struct {
	Contract     *FeeHandler       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FeeHandlerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeeHandlerCallerSession struct {
	Contract *FeeHandlerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// FeeHandlerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeeHandlerTransactorSession struct {
	Contract     *FeeHandlerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// FeeHandlerRaw is an auto generated low-level Go binding around an Ethereum contract.
type FeeHandlerRaw struct {
	Contract *FeeHandler // Generic contract binding to access the raw methods on
}

// FeeHandlerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeeHandlerCallerRaw struct {
	Contract *FeeHandlerCaller // Generic read-only contract binding to access the raw methods on
}

// FeeHandlerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeeHandlerTransactorRaw struct {
	Contract *FeeHandlerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFeeHandler creates a new instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandler(address common.Address, backend bind.ContractBackend) (*FeeHandler, error) {
	contract, err := bindFeeHandler(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeeHandler{FeeHandlerCaller: FeeHandlerCaller{contract: contract}, FeeHandlerTransactor: FeeHandlerTransactor{contract: contract}, FeeHandlerFilterer: FeeHandlerFilterer{contract: contract}}, nil
}

// NewFeeHandlerCaller creates a new read-only instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandlerCaller(address common.Address, caller bind.ContractCaller) (*FeeHandlerCaller, error) {
	contract, err := bindFeeHandler(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerCaller{contract: contract}, nil
}

// NewFeeHandlerTransactor creates a new write-only instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandlerTransactor(address common.Address, transactor bind.ContractTransactor) (*FeeHandlerTransactor, error) {
	contract, err := bindFeeHandler(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerTransactor{contract: contract}, nil
}

// NewFeeHandlerFilterer creates a new log filterer instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandlerFilterer(address common.Address, filterer bind.ContractFilterer) (*FeeHandlerFilterer, error) {
	contract, err := bindFeeHandler(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerFilterer{contract: contract}, nil
}

// bindFeeHandler binds a generic wrapper to an already deployed contract.
func bindFeeHandler(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FeeHandlerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeHandler *FeeHandlerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeHandler.Contract.FeeHandlerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeHandler *FeeHandlerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.Contract.FeeHandlerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeHandler *FeeHandlerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeHandler.Contract.FeeHandlerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeHandler *FeeHandlerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeHandler.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeHandler *FeeHandlerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeHandler *FeeHandlerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeHandler.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_FeeHandler *FeeHandlerCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_FeeHandler *FeeHandlerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _FeeHandler.Contract.DEFAULTADMINROLE(&_FeeHandler.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_FeeHandler *FeeHandlerCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _FeeHandler.Contract.DEFAULTADMINROLE(&_FeeHandler.CallOpts)
}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_FeeHandler *FeeHandlerCaller) BridgeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "_bridgeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_FeeHandler *FeeHandlerSession) BridgeAddress() (common.Address, error) {
	return _FeeHandler.Contract.BridgeAddress(&_FeeHandler.CallOpts)
}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_FeeHandler *FeeHandlerCallerSession) BridgeAddress() (common.Address, error) {
	return _FeeHandler.Contract.BridgeAddress(&_FeeHandler.CallOpts)
}

// FeeHandlerRouterAddress is a free data retrieval call binding the contract method 0x745e6b61.
//
// Solidity: function _feeHandlerRouterAddress() view returns(address)
func (_FeeHandler *FeeHandlerCaller) FeeHandlerRouterAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "_feeHandlerRouterAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeHandlerRouterAddress is a free data retrieval call binding the contract method 0x745e6b61.
//
// Solidity: function _feeHandlerRouterAddress() view returns(address)
func (_FeeHandler *FeeHandlerSession) FeeHandlerRouterAddress() (common.Address, error) {
	return _FeeHandler.Contract.FeeHandlerRouterAddress(&_FeeHandler.CallOpts)
}

// FeeHandlerRouterAddress is a free data retrieval call binding the contract method 0x745e6b61.
//
// Solidity: function _feeHandlerRouterAddress() view returns(address)
func (_FeeHandler *FeeHandlerCallerSession) FeeHandlerRouterAddress() (common.Address, error) {
	return _FeeHandler.Contract.FeeHandlerRouterAddress(&_FeeHandler.CallOpts)
}

// FeePercent is a free data retrieval call binding the contract method 0x69222948.
//
// Solidity: function _feePercent() view returns(uint16)
func (_FeeHandler *FeeHandlerCaller) FeePercent(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "_feePercent")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// FeePercent is a free data retrieval call binding the contract method 0x69222948.
//
// Solidity: function _feePercent() view returns(uint16)
func (_FeeHandler *FeeHandlerSession) FeePercent() (uint16, error) {
	return _FeeHandler.Contract.FeePercent(&_FeeHandler.CallOpts)
}

// FeePercent is a free data retrieval call binding the contract method 0x69222948.
//
// Solidity: function _feePercent() view returns(uint16)
func (_FeeHandler *FeeHandlerCallerSession) FeePercent() (uint16, error) {
	return _FeeHandler.Contract.FeePercent(&_FeeHandler.CallOpts)
}

// GasUsed is a free data retrieval call binding the contract method 0xfc818cfb.
//
// Solidity: function _gasUsed() view returns(uint32)
func (_FeeHandler *FeeHandlerCaller) GasUsed(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "_gasUsed")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GasUsed is a free data retrieval call binding the contract method 0xfc818cfb.
//
// Solidity: function _gasUsed() view returns(uint32)
func (_FeeHandler *FeeHandlerSession) GasUsed() (uint32, error) {
	return _FeeHandler.Contract.GasUsed(&_FeeHandler.CallOpts)
}

// GasUsed is a free data retrieval call binding the contract method 0xfc818cfb.
//
// Solidity: function _gasUsed() view returns(uint32)
func (_FeeHandler *FeeHandlerCallerSession) GasUsed() (uint32, error) {
	return _FeeHandler.Contract.GasUsed(&_FeeHandler.CallOpts)
}

// OracleAddress is a free data retrieval call binding the contract method 0x6fb7cb57.
//
// Solidity: function _oracleAddress() view returns(address)
func (_FeeHandler *FeeHandlerCaller) OracleAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "_oracleAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OracleAddress is a free data retrieval call binding the contract method 0x6fb7cb57.
//
// Solidity: function _oracleAddress() view returns(address)
func (_FeeHandler *FeeHandlerSession) OracleAddress() (common.Address, error) {
	return _FeeHandler.Contract.OracleAddress(&_FeeHandler.CallOpts)
}

// OracleAddress is a free data retrieval call binding the contract method 0x6fb7cb57.
//
// Solidity: function _oracleAddress() view returns(address)
func (_FeeHandler *FeeHandlerCallerSession) OracleAddress() (common.Address, error) {
	return _FeeHandler.Contract.OracleAddress(&_FeeHandler.CallOpts)
}

// CalculateFee is a free data retrieval call binding the contract method 0xef4f081f.
//
// Solidity: function calculateFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) view returns(uint256 fee, address tokenAddress)
func (_FeeHandler *FeeHandlerCaller) CalculateFee(opts *bind.CallOpts, sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (struct {
	Fee          *big.Int
	TokenAddress common.Address
}, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "calculateFee", sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)

	outstruct := new(struct {
		Fee          *big.Int
		TokenAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TokenAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// CalculateFee is a free data retrieval call binding the contract method 0xef4f081f.
//
// Solidity: function calculateFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) view returns(uint256 fee, address tokenAddress)
func (_FeeHandler *FeeHandlerSession) CalculateFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (struct {
	Fee          *big.Int
	TokenAddress common.Address
}, error) {
	return _FeeHandler.Contract.CalculateFee(&_FeeHandler.CallOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// CalculateFee is a free data retrieval call binding the contract method 0xef4f081f.
//
// Solidity: function calculateFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) view returns(uint256 fee, address tokenAddress)
func (_FeeHandler *FeeHandlerCallerSession) CalculateFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (struct {
	Fee          *big.Int
	TokenAddress common.Address
}, error) {
	return _FeeHandler.Contract.CalculateFee(&_FeeHandler.CallOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_FeeHandler *FeeHandlerCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_FeeHandler *FeeHandlerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _FeeHandler.Contract.GetRoleAdmin(&_FeeHandler.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_FeeHandler *FeeHandlerCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _FeeHandler.Contract.GetRoleAdmin(&_FeeHandler.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_FeeHandler *FeeHandlerCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_FeeHandler *FeeHandlerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _FeeHandler.Contract.HasRole(&_FeeHandler.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_FeeHandler *FeeHandlerCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _FeeHandler.Contract.HasRole(&_FeeHandler.CallOpts, role, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeeHandler *FeeHandlerCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeeHandler *FeeHandlerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeeHandler.Contract.SupportsInterface(&_FeeHandler.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeeHandler *FeeHandlerCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeeHandler.Contract.SupportsInterface(&_FeeHandler.CallOpts, interfaceId)
}

// CollectFee is a paid mutator transaction binding the contract method 0x25307065.
//
// Solidity: function collectFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_FeeHandler *FeeHandlerTransactor) CollectFee(opts *bind.TransactOpts, sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "collectFee", sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// CollectFee is a paid mutator transaction binding the contract method 0x25307065.
//
// Solidity: function collectFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_FeeHandler *FeeHandlerSession) CollectFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _FeeHandler.Contract.CollectFee(&_FeeHandler.TransactOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// CollectFee is a paid mutator transaction binding the contract method 0x25307065.
//
// Solidity: function collectFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_FeeHandler *FeeHandlerTransactorSession) CollectFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _FeeHandler.Contract.CollectFee(&_FeeHandler.TransactOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.GrantRole(&_FeeHandler.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.GrantRole(&_FeeHandler.TransactOpts, role, account)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_FeeHandler *FeeHandlerTransactor) RenounceAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "renounceAdmin", newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_FeeHandler *FeeHandlerSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RenounceAdmin(&_FeeHandler.TransactOpts, newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_FeeHandler *FeeHandlerTransactorSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RenounceAdmin(&_FeeHandler.TransactOpts, newAdmin)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RenounceRole(&_FeeHandler.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RenounceRole(&_FeeHandler.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RevokeRole(&_FeeHandler.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RevokeRole(&_FeeHandler.TransactOpts, role, account)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address oracleAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) SetFeeOracle(opts *bind.TransactOpts, oracleAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setFeeOracle", oracleAddress)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address oracleAddress) returns()
func (_FeeHandler *FeeHandlerSession) SetFeeOracle(oracleAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeOracle(&_FeeHandler.TransactOpts, oracleAddress)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address oracleAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetFeeOracle(oracleAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeOracle(&_FeeHandler.TransactOpts, oracleAddress)
}

// SetFeeProperties is a paid mutator transaction binding the contract method 0xc297983f.
//
// Solidity: function setFeeProperties(uint32 gasUsed, uint16 feePercent) returns()
func (_FeeHandler *FeeHandlerTransactor) SetFeeProperties(opts *bind.TransactOpts, gasUsed uint32, feePercent uint16) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setFeeProperties", gasUsed, feePercent)
}

// SetFeeProperties is a paid mutator transaction binding the contract method 0xc297983f.
//
// Solidity: function setFeeProperties(uint32 gasUsed, uint16 feePercent) returns()
func (_FeeHandler *FeeHandlerSession) SetFeeProperties(gasUsed uint32, feePercent uint16) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeProperties(&_FeeHandler.TransactOpts, gasUsed, feePercent)
}

// SetFeeProperties is a paid mutator transaction binding the contract method 0xc297983f.
//
// Solidity: function setFeeProperties(uint32 gasUsed, uint16 feePercent) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetFeeProperties(gasUsed uint32, feePercent uint16) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeProperties(&_FeeHandler.TransactOpts, gasUsed, feePercent)
}

// TransferFee is a paid mutator transaction binding the contract method 0xbff42755.
//
// Solidity: function transferFee(bytes32 resourceID, address[] addrs, uint256[] amounts) returns()
func (_FeeHandler *FeeHandlerTransactor) TransferFee(opts *bind.TransactOpts, resourceID [32]byte, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "transferFee", resourceID, addrs, amounts)
}

// TransferFee is a paid mutator transaction binding the contract method 0xbff42755.
//
// Solidity: function transferFee(bytes32 resourceID, address[] addrs, uint256[] amounts) returns()
func (_FeeHandler *FeeHandlerSession) TransferFee(resourceID [32]byte, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.TransferFee(&_FeeHandler.TransactOpts, resourceID, addrs, amounts)
}

// TransferFee is a paid mutator transaction binding the contract method 0xbff42755.
//
// Solidity: function transferFee(bytes32 resourceID, address[] addrs, uint256[] amounts) returns()
func (_FeeHandler *FeeHandlerTransactorSession) TransferFee(resourceID [32]byte, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.TransferFee(&_FeeHandler.TransactOpts, resourceID, addrs, amounts)
}

// FeeHandlerFeeCollectedIterator is returned from FilterFeeCollected and is used to iterate over the raw logs and unpacked data for FeeCollected events raised by the FeeHandler contract.
type FeeHandlerFeeCollectedIterator struct {
	Event *FeeHandlerFeeCollected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerFeeCollectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerFeeCollected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerFeeCollected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerFeeCollectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerFeeCollectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerFeeCollected represents a FeeCollected event raised by the FeeHandler contract.
type FeeHandlerFeeCollected struct {
	Sender              common.Address
	FromDomainID        uint8
	DestinationDomainID uint8
	ResourceID          [32]byte
	Fee                 *big.Int
	TokenAddress        common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterFeeCollected is a free log retrieval operation binding the contract event 0xbd231b7fa4103e15e7a238c72f07e8aff310701af121895aa6c793b80245e433.
//
// Solidity: event FeeCollected(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, uint256 fee, address tokenAddress)
func (_FeeHandler *FeeHandlerFilterer) FilterFeeCollected(opts *bind.FilterOpts) (*FeeHandlerFeeCollectedIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "FeeCollected")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerFeeCollectedIterator{contract: _FeeHandler.contract, event: "FeeCollected", logs: logs, sub: sub}, nil
}

// WatchFeeCollected is a free log subscription operation binding the contract event 0xbd231b7fa4103e15e7a238c72f07e8aff310701af121895aa6c793b80245e433.
//
// Solidity: event FeeCollected(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, uint256 fee, address tokenAddress)
func (_FeeHandler *FeeHandlerFilterer) WatchFeeCollected(opts *bind.WatchOpts, sink chan<- *FeeHandlerFeeCollected) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "FeeCollected")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerFeeCollected)
				if err := _FeeHandler.contract.UnpackLog(event, "FeeCollected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeCollected is a log parse operation binding the contract event 0xbd231b7fa4103e15e7a238c72f07e8aff310701af121895aa6c793b80245e433.
//
// Solidity: event FeeCollected(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, uint256 fee, address tokenAddress)
func (_FeeHandler *FeeHandlerFilterer) ParseFeeCollected(log types.Log) (*FeeHandlerFeeCollected, error) {
	event := new(FeeHandlerFeeCollected)
	if err := _FeeHandler.contract.UnpackLog(event, "FeeCollected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerFeeDistributedIterator is returned from FilterFeeDistributed and is used to iterate over the raw logs and unpacked data for FeeDistributed events raised by the FeeHandler contract.
type FeeHandlerFeeDistributedIterator struct {
	Event *FeeHandlerFeeDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerFeeDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerFeeDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerFeeDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerFeeDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerFeeDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerFeeDistributed represents a FeeDistributed event raised by the FeeHandler contract.
type FeeHandlerFeeDistributed struct {
	TokenAddress common.Address
	Recipient    common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFeeDistributed is a free log retrieval operation binding the contract event 0xaaa40a232aaf133fdd28f3485f6fdd163514cfadbffa981f3610f42398efe34b.
//
// Solidity: event FeeDistributed(address tokenAddress, address recipient, uint256 amount)
func (_FeeHandler *FeeHandlerFilterer) FilterFeeDistributed(opts *bind.FilterOpts) (*FeeHandlerFeeDistributedIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "FeeDistributed")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerFeeDistributedIterator{contract: _FeeHandler.contract, event: "FeeDistributed", logs: logs, sub: sub}, nil
}

// WatchFeeDistributed is a free log subscription operation binding the contract event 0xaaa40a232aaf133fdd28f3485f6fdd163514cfadbffa981f3610f42398efe34b.
//
// Solidity: event FeeDistributed(address tokenAddress, address recipient, uint256 amount)
func (_FeeHandler *FeeHandlerFilterer) WatchFeeDistributed(opts *bind.WatchOpts, sink chan<- *FeeHandlerFeeDistributed) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "FeeDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerFeeDistributed)
				if err := _FeeHandler.contract.UnpackLog(event, "FeeDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeDistributed is a log parse operation binding the contract event 0xaaa40a232aaf133fdd28f3485f6fdd163514cfadbffa981f3610f42398efe34b.
//
// Solidity: event FeeDistributed(address tokenAddress, address recipient, uint256 amount)
func (_FeeHandler *FeeHandlerFilterer) ParseFeeDistributed(log types.Log) (*FeeHandlerFeeDistributed, error) {
	event := new(FeeHandlerFeeDistributed)
	if err := _FeeHandler.contract.UnpackLog(event, "FeeDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the FeeHandler contract.
type FeeHandlerRoleAdminChangedIterator struct {
	Event *FeeHandlerRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerRoleAdminChanged represents a RoleAdminChanged event raised by the FeeHandler contract.
type FeeHandlerRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_FeeHandler *FeeHandlerFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*FeeHandlerRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerRoleAdminChangedIterator{contract: _FeeHandler.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_FeeHandler *FeeHandlerFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *FeeHandlerRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerRoleAdminChanged)
				if err := _FeeHandler.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_FeeHandler *FeeHandlerFilterer) ParseRoleAdminChanged(log types.Log) (*FeeHandlerRoleAdminChanged, error) {
	event := new(FeeHandlerRoleAdminChanged)
	if err := _FeeHandler.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the FeeHandler contract.
type FeeHandlerRoleGrantedIterator struct {
	Event *FeeHandlerRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerRoleGranted represents a RoleGranted event raised by the FeeHandler contract.
type FeeHandlerRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*FeeHandlerRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerRoleGrantedIterator{contract: _FeeHandler.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *FeeHandlerRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerRoleGranted)
				if err := _FeeHandler.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) ParseRoleGranted(log types.Log) (*FeeHandlerRoleGranted, error) {
	event := new(FeeHandlerRoleGranted)
	if err := _FeeHandler.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the FeeHandler contract.
type FeeHandlerRoleRevokedIterator struct {
	Event *FeeHandlerRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerRoleRevoked represents a RoleRevoked event raised by the FeeHandler contract.
type FeeHandlerRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*FeeHandlerRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerRoleRevokedIterator{contract: _FeeHandler.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *FeeHandlerRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerRoleRevoked)
				if err := _FeeHandler.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) ParseRoleRevoked(log types.Log) (*FeeHandlerRoleRevoked, error) {
	event := new(FeeHandlerRoleRevoked)
	if err := _FeeHandler.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
