// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeProposal is an auto generated low-level Go binding around an user-defined struct.
type BridgeProposal struct {
	OriginDomainID uint8
	DepositNonce   uint64
	ResourceID     [32]byte
	Data           []byte
}

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControl\",\"type\":\"address\"}],\"name\":\"AccessControlChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"handlerResponse\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndKeygen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"}],\"name\":\"FailedHandlerExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeHandler\",\"type\":\"address\"}],\"name\":\"FeeHandlerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"KeyRefresh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"Retry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartKeygen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_MPCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_accessControl\",\"outputs\":[{\"internalType\":\"contractIAccessControlSegregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_domainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeHandler\",\"outputs\":[{\"internalType\":\"contractIFeeHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessControl\",\"type\":\"address\"}],\"name\":\"adminChangeAccessControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeHandler\",\"type\":\"address\"}],\"name\":\"adminChangeFeeHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"adminSetDepositNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"adminSetForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MPCAddress\",\"type\":\"address\"}],\"name\":\"endKeygen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structBridge.Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structBridge.Proposal[]\",\"name\":\"proposals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"isProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"refreshKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"retry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startKeygen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structBridge.Proposal[]\",\"name\":\"proposals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x6101606040523480156200001257600080fd5b50604051620049ad380380620049ad833981810160405281019062000038919062000402565b6040518060400160405280600681526020017f42726964676500000000000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f332e312e3000000000000000000000000000000000000000000000000000000081525060008060006101000a81548160ff02191690831515021790555060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a0818152505062000127818484620001e860201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050508160ff166101408160ff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001e0620001d46200022460201b60201c565b620002a160201b60201c565b50506200058d565b600083838346306040516020016200020595949392919062000490565b6040516020818303038152906040528051906020012090509392505050565b6000803390506014600036905010158015620002895750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156200029a57601436033560601c90505b8091505090565b620002b16200030760201b60201c565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25881604051620002fc9190620004ed565b60405180910390a150565b60008054906101000a900460ff161562000358576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034f906200056b565b60405180910390fd5b565b600080fd5b600060ff82169050919050565b62000377816200035f565b81146200038357600080fd5b50565b60008151905062000397816200036c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003ca826200039d565b9050919050565b620003dc81620003bd565b8114620003e857600080fd5b50565b600081519050620003fc81620003d1565b92915050565b600080604083850312156200041c576200041b6200035a565b5b60006200042c8582860162000386565b92505060206200043f85828601620003eb565b9150509250929050565b6000819050919050565b6200045e8162000449565b82525050565b6000819050919050565b620004798162000464565b82525050565b6200048a81620003bd565b82525050565b600060a082019050620004a7600083018862000453565b620004b6602083018762000453565b620004c5604083018662000453565b620004d460608301856200046e565b620004e360808301846200047f565b9695505050505050565b60006020820190506200050460008301846200047f565b92915050565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000620005536010836200050a565b915062000560826200051b565b602082019050919050565b60006020820190508181036000830152620005868162000544565b9050919050565b60805160a05160c05160e0516101005161012051610140516143b7620005f660003960008181610d6501528181610eb90152611516015260006121180152600061215a015260006121390152600061206e015260006120c4015260006120ed01526143b76000f3fe60806040526004361061019c5760003560e01c80638c0c2631116100ec578063d2e5fae91161008a578063f0ead51e11610064578063f0ead51e1461058b578063f8c39e44146105b4578063fe4648f4146105f1578063ffaac0eb1461061c5761019c565b8063d2e5fae914610510578063d823674414610539578063edc20c3c146105625761019c565b80639dd694f4116100c65780639dd694f414610456578063a546e8a114610481578063bd2a1820146104be578063d15ef64e146104e75761019c565b80638c0c2631146103c75780639ae0bf45146103f05780639d33b6d41461042d5761019c565b80635c975abb1161015957806380ae1c281161013357806380ae1c281461032157806384db809f146103385780638a3234c7146103755780638b63aebf1461039e5761019c565b80635c975abb146102c35780636ba6db6b146102ee57806373c45c98146103055761019c565b8063059972d2146101a157806308a64104146101cc5780631f5c64c114610209578063366b48851461023257806344e8e4301461025b5780634b0b919d14610286575b600080fd5b3480156101ad57600080fd5b506101b6610633565b6040516101c3919061267d565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee919061271b565b610659565b604051610200919061276a565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b9190612b20565b61067e565b005b34801561023e57600080fd5b5061025960048036038101906102549190612c3d565b610b95565b005b34801561026757600080fd5b50610270610c04565b60405161027d9190612ce5565b60405180910390f35b34801561029257600080fd5b506102ad60048036038101906102a89190612d00565b610c2a565b6040516102ba9190612d3c565b60405180910390f35b3480156102cf57600080fd5b506102d8610c51565b6040516102e59190612d72565b60405180910390f35b3480156102fa57600080fd5b50610303610c67565b005b61031f600480360381019061031a9190612d8d565b610d5b565b005b34801561032d57600080fd5b50610336611133565b005b34801561034457600080fd5b5061035f600480360381019061035a9190612e34565b61117a565b60405161036c919061267d565b60405180910390f35b34801561038157600080fd5b5061039c60048036038101906103979190612e8d565b6111ad565b005b3480156103aa57600080fd5b506103c560048036038101906103c09190612f15565b6112b2565b005b3480156103d357600080fd5b506103ee60048036038101906103e99190612f42565b611362565b005b3480156103fc57600080fd5b506104176004803603810190610412919061271b565b61140c565b6040516104249190612d72565b60405180910390f35b34801561043957600080fd5b50610454600480360381019061044f9190612f15565b611464565b005b34801561046257600080fd5b5061046b611514565b6040516104789190612f91565b60405180910390f35b34801561048d57600080fd5b506104a860048036038101906104a39190612b20565b611538565b6040516104b59190612d72565b60405180910390f35b3480156104ca57600080fd5b506104e560048036038101906104e09190612fac565b6117c1565b005b3480156104f357600080fd5b5061050e60048036038101906105099190613034565b61186b565b005b34801561051c57600080fd5b5061053760048036038101906105329190612f15565b6118fb565b005b34801561054557600080fd5b50610560600480360381019061055b9190612c3d565b611ab1565b005b34801561056e57600080fd5b5061058960048036038101906105849190613074565b611b20565b005b34801561059757600080fd5b506105b260048036038101906105ad91906130b4565b611c1c565b005b3480156105c057600080fd5b506105db60048036038101906105d69190612f15565b611ca6565b6040516105e89190612d72565b60405180910390f35b3480156105fd57600080fd5b50610606611cc6565b6040516106139190613151565b60405180910390f35b34801561062857600080fd5b50610631611cec565b005b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052816000526040600020602052806000526040600020600091509150505481565b610686611dc5565b60008351116106ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c1906131ef565b60405180910390fd5b6106d5838383611538565b610714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070b9061325b565b60405180910390fd5b60005b8351811015610b8f576107708482815181106107365761073561327b565b5b6020026020010151600001518583815181106107555761075461327b565b5b60200260200101516020015167ffffffffffffffff1661140c565b1561077a57610b7c565b6000600460008684815181106107935761079261327b565b5b602002602001015160400151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000818684815181106107e6576107e561327b565b5b60200260200101516060015160405160200161080392919061336c565b60405160208183030381529060405280519060200120905060008290506101008785815181106108365761083561327b565b5b60200260200101516020015161084c91906133c3565b67ffffffffffffffff166001901b600660008987815181106108715761087061327b565b5b60200260200101516000015160ff1660ff16815260200190815260200160002060006101008a88815181106108a9576108a861327b565b5b6020026020010151602001516108bf9190613423565b67ffffffffffffffff168152602001908152602001600020600082825417925050819055508073ffffffffffffffffffffffffffffffffffffffff1663e248cff28886815181106109135761091261327b565b5b6020026020010151604001518987815181106109325761093161327b565b5b6020026020010151606001516040518363ffffffff1660e01b815260040161095b9291906134ad565b600060405180830381600087803b15801561097557600080fd5b505af1925050508015610986575060015b610b01573d80600081146109b6576040519150601f19603f3d011682016040523d82523d6000602084013e6109bb565b606091505b507f19f774a63ee465292252a9981ae52051acc13da671c698ac4b5bf25b38c5b6fc818987815181106109f1576109f061327b565b5b6020026020010151600001518a8881518110610a1057610a0f61327b565b5b602002602001015160200151604051610a2b939291906134dd565b60405180910390a1610100888681518110610a4957610a4861327b565b5b602002602001015160200151610a5f91906133c3565b67ffffffffffffffff166001901b19600660008a8881518110610a8557610a8461327b565b5b60200260200101516000015160ff1660ff16815260200190815260200160002060006101008b8981518110610abd57610abc61327b565b5b602002602001015160200151610ad39190613423565b67ffffffffffffffff1681526020019081526020016000206000828254169250508190555050505050610b7c565b7f6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677878581518110610b3557610b3461327b565b5b602002602001015160000151888681518110610b5457610b5361327b565b5b60200260200101516020015184604051610b709392919061351b565b60405180910390a15050505b8080610b8790613552565b915050610717565b50505050565b610bca6000357fffffffff0000000000000000000000000000000000000000000000000000000016610bc5611e15565b611e90565b7f9069464c059b9a90135a3fdf2c47855263346b912894ad7562d989532c3fad4c81604051610bf991906135df565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900467ffffffffffffffff1681565b60008060009054906101000a900460ff16905090565b610c9c6000357fffffffff0000000000000000000000000000000000000000000000000000000016610c97611e15565b611e90565b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d249061364d565b60405180910390fd5b7f24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce4360405160405180910390a1565b610d63611dc5565b7f000000000000000000000000000000000000000000000000000000000000000060ff168660ff161415610dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc3906136b9565b60405180910390fd5b6000610dd6611e15565b9050600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e775760003414610e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6990613725565b60405180910390fd5b610f34565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632530706534837f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b8b8b6040518a63ffffffff1660e01b8152600401610f01989796959493929190613772565b6000604051808303818588803b158015610f1a57600080fd5b505af1158015610f2e573d6000803e3d6000fd5b50505050505b60006004600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd390613831565b60405180910390fd5b6000600360008a60ff1660ff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1661101790613851565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790559050600082905060008173ffffffffffffffffffffffffffffffffffffffff1663b07e54bb8b878c8c6040518563ffffffff1660e01b81526004016110849493929190613882565b6000604051808303816000875af11580156110a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110cc9190613932565b90508473ffffffffffffffffffffffffffffffffffffffff167f17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f8c8c868d8d8760405161111e9695949392919061397b565b60405180910390a25050505050505050505050565b6111686000357fffffffff0000000000000000000000000000000000000000000000000000000016611163611e15565b611e90565b611178611173611e15565b611f71565b565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111e26000357fffffffff00000000000000000000000000000000000000000000000000000000166111dd611e15565b611e90565b846004600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008590508073ffffffffffffffffffffffffffffffffffffffff1663fa8675b0868686866040518563ffffffff1660e01b81526004016112789493929190613882565b600060405180830381600087803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b50505050505050505050565b6112e76000357fffffffff00000000000000000000000000000000000000000000000000000000166112e2611e15565b611e90565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c81604051611357919061267d565b60405180910390a150565b6113976000357fffffffff0000000000000000000000000000000000000000000000000000000016611392611e15565b611e90565b60008290508073ffffffffffffffffffffffffffffffffffffffff166307b7ed99836040518263ffffffff1660e01b81526004016113d5919061267d565b600060405180830381600087803b1580156113ef57600080fd5b505af1158015611403573d6000803e3d6000fd5b50505050505050565b6000806101008361141d91906139de565b6001901b600660008660ff1660ff16815260200190815260200160002060006101008661144a9190613a0f565b815260200190815260200160002054161415905092915050565b6114996000357fffffffff0000000000000000000000000000000000000000000000000000000016611494611e15565b611e90565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f497acaa34ac19c2a2a579ad43eca493b4fea820459e254e9383e7dda216b0f0481604051611509919061267d565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080845167ffffffffffffffff8111156115565761155561279b565b5b6040519080825280602002602001820160405280156115845781602001602082028036833780820191505090505b50905060005b8551811015611693577fcc13634e956dd3d4ec8d808ee8bf294e1cd05a38f63fe7f234b079a0a4c36a708682815181106115c7576115c661327b565b5b6020026020010151600001518783815181106115e6576115e561327b565b5b6020026020010151602001518884815181106116055761160461327b565b5b6020026020010151604001518985815181106116245761162361327b565b5b6020026020010151606001518051906020012060405160200161164b959493929190613a40565b604051602081830303815290604052805190602001208282815181106116745761167361327b565b5b602002602001018181525050808061168b90613552565b91505061158a565b50600061176385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506117557f989d14110ba109ccad392cc18511d1f6ae3a85165c5960e49d72c2c67682fde5856040516020016117139190613b4b565b6040516020818303038152906040528051906020012060405160200161173a929190613b62565b60405160208183030381529060405280519060200120611fcd565b611fe790919063ffffffff16565b9050600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614925050509392505050565b6117f66000357fffffffff00000000000000000000000000000000000000000000000000000000166117f1611e15565b611e90565b60008290508073ffffffffffffffffffffffffffffffffffffffff16630968f264836040518263ffffffff1660e01b81526004016118349190613b8b565b600060405180830381600087803b15801561184e57600080fd5b505af1158015611862573d6000803e3d6000fd5b50505050505050565b6118a06000357fffffffff000000000000000000000000000000000000000000000000000000001661189b611e15565b611e90565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6119306000357fffffffff000000000000000000000000000000000000000000000000000000001661192b611e15565b611e90565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199790613c1f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2890613c8b565b60405180910390fd5b80600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611a82611a7d611e15565b61200e565b7f4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad5760405160405180910390a150565b611ae66000357fffffffff0000000000000000000000000000000000000000000000000000000016611ae1611e15565b611e90565b7fe78d813a9260522f81d6c761e311727b2e19008daadd2b9e174be86bc4f06a4b81604051611b1591906135df565b60405180910390a150565b611b556000357fffffffff0000000000000000000000000000000000000000000000000000000016611b50611e15565b611e90565b600360008360ff1660ff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1611611bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bcf90613d1d565b60405180910390fd5b80600360008460ff1660ff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b6000600167ffffffffffffffff811115611c3957611c3861279b565b5b604051908082528060200260200182016040528015611c7257816020015b611c5f612604565b815260200190600190039081611c575790505b5090508381600081518110611c8a57611c8961327b565b5b6020026020010181905250611ca081848461067e565b50505050565b60056020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611d216000357fffffffff0000000000000000000000000000000000000000000000000000000016611d1c611e15565b611e90565b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daa90613d89565b60405180910390fd5b611dc3611dbe611e15565b61200e565b565b60008054906101000a900460ff1615611e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0a90613df5565b60405180910390fd5b565b6000803390506014600036905010158015611e795750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15611e8957601436033560601c90505b8091505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371c9521c83836040518363ffffffff1660e01b8152600401611eed929190613e50565b602060405180830381865afa158015611f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2e9190613e8e565b611f6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6490613f2d565b60405180910390fd5b5050565b611f79611dc5565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25881604051611fc2919061267d565b60405180910390a150565b6000611fe0611fda61206a565b83612184565b9050919050565b6000806000611ff685856121b7565b915091506120038161223a565b819250505092915050565b61201661240f565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa8160405161205f919061267d565b60405180910390a150565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156120e657507f000000000000000000000000000000000000000000000000000000000000000046145b15612113577f00000000000000000000000000000000000000000000000000000000000000009050612181565b61217e7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061245e565b90505b90565b60008282604051602001612199929190613fc5565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156121f95760008060006020860151925060408601519150606086015160001a90506121ed87828585612498565b94509450505050612233565b60408351141561222a57600080602085015191506040850151905061221f8683836125a5565b935093505050612233565b60006002915091505b9250929050565b6000600481111561224e5761224d613ffc565b5b81600481111561226157612260613ffc565b5b141561226c5761240c565b600160048111156122805761227f613ffc565b5b81600481111561229357612292613ffc565b5b14156122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb90614077565b60405180910390fd5b600260048111156122e8576122e7613ffc565b5b8160048111156122fb576122fa613ffc565b5b141561233c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612333906140e3565b60405180910390fd5b600360048111156123505761234f613ffc565b5b81600481111561236357612362613ffc565b5b14156123a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239b90614175565b60405180910390fd5b6004808111156123b7576123b6613ffc565b5b8160048111156123ca576123c9613ffc565b5b141561240b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240290614207565b60405180910390fd5b5b50565b60008054906101000a900460ff1661245c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245390614273565b60405180910390fd5b565b60008383834630604051602001612479959493929190614293565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156124d357600060039150915061259c565b601b8560ff16141580156124eb5750601c8560ff1614155b156124fd57600060049150915061259c565b60006001878787876040516000815260200160405260405161252294939291906142e6565b6020604051602081039080840390855afa158015612544573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125935760006001925092505061259c565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6125e8919061432b565b90506125f687828885612498565b935093505050935093915050565b6040518060800160405280600060ff168152602001600067ffffffffffffffff16815260200160008019168152602001606081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126678261263c565b9050919050565b6126778161265c565b82525050565b6000602082019050612692600083018461266e565b92915050565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b6126c2816126ac565b81146126cd57600080fd5b50565b6000813590506126df816126b9565b92915050565b6000819050919050565b6126f8816126e5565b811461270357600080fd5b50565b600081359050612715816126ef565b92915050565b60008060408385031215612732576127316126a2565b5b6000612740858286016126d0565b925050602061275185828601612706565b9150509250929050565b612764816126e5565b82525050565b600060208201905061277f600083018461275b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127d38261278a565b810181811067ffffffffffffffff821117156127f2576127f161279b565b5b80604052505050565b6000612805612698565b905061281182826127ca565b919050565b600067ffffffffffffffff8211156128315761283061279b565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b61286e81612851565b811461287957600080fd5b50565b60008135905061288b81612865565b92915050565b6000819050919050565b6128a481612891565b81146128af57600080fd5b50565b6000813590506128c18161289b565b92915050565b600080fd5b600067ffffffffffffffff8211156128e7576128e661279b565b5b6128f08261278a565b9050602081019050919050565b82818337600083830152505050565b600061291f61291a846128cc565b6127fb565b90508281526020810184848401111561293b5761293a6128c7565b5b6129468482856128fd565b509392505050565b600082601f83011261296357612962612785565b5b813561297384826020860161290c565b91505092915050565b60006080828403121561299257612991612847565b5b61299c60806127fb565b905060006129ac848285016126d0565b60008301525060206129c08482850161287c565b60208301525060406129d4848285016128b2565b604083015250606082013567ffffffffffffffff8111156129f8576129f761284c565b5b612a048482850161294e565b60608301525092915050565b6000612a23612a1e84612816565b6127fb565b90508083825260208201905060208402830185811115612a4657612a45612842565b5b835b81811015612a8d57803567ffffffffffffffff811115612a6b57612a6a612785565b5b808601612a78898261297c565b85526020850194505050602081019050612a48565b5050509392505050565b600082601f830112612aac57612aab612785565b5b8135612abc848260208601612a10565b91505092915050565b600080fd5b60008083601f840112612ae057612adf612785565b5b8235905067ffffffffffffffff811115612afd57612afc612ac5565b5b602083019150836001820283011115612b1957612b18612842565b5b9250929050565b600080600060408486031215612b3957612b386126a2565b5b600084013567ffffffffffffffff811115612b5757612b566126a7565b5b612b6386828701612a97565b935050602084013567ffffffffffffffff811115612b8457612b836126a7565b5b612b9086828701612aca565b92509250509250925092565b600067ffffffffffffffff821115612bb757612bb661279b565b5b612bc08261278a565b9050602081019050919050565b6000612be0612bdb84612b9c565b6127fb565b905082815260208101848484011115612bfc57612bfb6128c7565b5b612c078482856128fd565b509392505050565b600082601f830112612c2457612c23612785565b5b8135612c34848260208601612bcd565b91505092915050565b600060208284031215612c5357612c526126a2565b5b600082013567ffffffffffffffff811115612c7157612c706126a7565b5b612c7d84828501612c0f565b91505092915050565b6000819050919050565b6000612cab612ca6612ca18461263c565b612c86565b61263c565b9050919050565b6000612cbd82612c90565b9050919050565b6000612ccf82612cb2565b9050919050565b612cdf81612cc4565b82525050565b6000602082019050612cfa6000830184612cd6565b92915050565b600060208284031215612d1657612d156126a2565b5b6000612d24848285016126d0565b91505092915050565b612d3681612851565b82525050565b6000602082019050612d516000830184612d2d565b92915050565b60008115159050919050565b612d6c81612d57565b82525050565b6000602082019050612d876000830184612d63565b92915050565b60008060008060008060808789031215612daa57612da96126a2565b5b6000612db889828a016126d0565b9650506020612dc989828a016128b2565b955050604087013567ffffffffffffffff811115612dea57612de96126a7565b5b612df689828a01612aca565b9450945050606087013567ffffffffffffffff811115612e1957612e186126a7565b5b612e2589828a01612aca565b92509250509295509295509295565b600060208284031215612e4a57612e496126a2565b5b6000612e58848285016128b2565b91505092915050565b612e6a8161265c565b8114612e7557600080fd5b50565b600081359050612e8781612e61565b92915050565b600080600080600060808688031215612ea957612ea86126a2565b5b6000612eb788828901612e78565b9550506020612ec8888289016128b2565b9450506040612ed988828901612e78565b935050606086013567ffffffffffffffff811115612efa57612ef96126a7565b5b612f0688828901612aca565b92509250509295509295909350565b600060208284031215612f2b57612f2a6126a2565b5b6000612f3984828501612e78565b91505092915050565b60008060408385031215612f5957612f586126a2565b5b6000612f6785828601612e78565b9250506020612f7885828601612e78565b9150509250929050565b612f8b816126ac565b82525050565b6000602082019050612fa66000830184612f82565b92915050565b60008060408385031215612fc357612fc26126a2565b5b6000612fd185828601612e78565b925050602083013567ffffffffffffffff811115612ff257612ff16126a7565b5b612ffe8582860161294e565b9150509250929050565b61301181612d57565b811461301c57600080fd5b50565b60008135905061302e81613008565b92915050565b6000806040838503121561304b5761304a6126a2565b5b600061305985828601612e78565b925050602061306a8582860161301f565b9150509250929050565b6000806040838503121561308b5761308a6126a2565b5b6000613099858286016126d0565b92505060206130aa8582860161287c565b9150509250929050565b6000806000604084860312156130cd576130cc6126a2565b5b600084013567ffffffffffffffff8111156130eb576130ea6126a7565b5b6130f78682870161297c565b935050602084013567ffffffffffffffff811115613118576131176126a7565b5b61312486828701612aca565b92509250509250925092565b600061313b82612cb2565b9050919050565b61314b81613130565b82525050565b60006020820190506131666000830184613142565b92915050565b600082825260208201905092915050565b7f50726f706f73616c732063616e277420626520616e20656d707479206172726160008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b60006131d960218361316c565b91506131e48261317d565b604082019050919050565b60006020820190508181036000830152613208816131cc565b9050919050565b7f496e76616c69642070726f706f73616c207369676e6572000000000000000000600082015250565b600061324560178361316c565b91506132508261320f565b602082019050919050565b6000602082019050818103600083015261327481613238565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160601b9050919050565b60006132c2826132aa565b9050919050565b60006132d4826132b7565b9050919050565b6132ec6132e78261265c565b6132c9565b82525050565b600081519050919050565b600081905092915050565b60005b8381101561332657808201518184015260208101905061330b565b83811115613335576000848401525b50505050565b6000613346826132f2565b61335081856132fd565b9350613360818560208601613308565b80840191505092915050565b600061337882856132db565b601482019150613388828461333b565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133ce82612851565b91506133d983612851565b9250826133e9576133e8613394565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061342e82612851565b915061343983612851565b92508261344957613448613394565b5b828204905092915050565b61345d81612891565b82525050565b600082825260208201905092915050565b600061347f826132f2565b6134898185613463565b9350613499818560208601613308565b6134a28161278a565b840191505092915050565b60006040820190506134c26000830185613454565b81810360208301526134d48184613474565b90509392505050565b600060608201905081810360008301526134f78186613474565b90506135066020830185612f82565b6135136040830184612d2d565b949350505050565b60006060820190506135306000830186612f82565b61353d6020830185612d2d565b61354a6040830184613454565b949350505050565b600061355d826126e5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135905761358f6133f4565b5b600182019050919050565b600081519050919050565b60006135b18261359b565b6135bb818561316c565b93506135cb818560208601613308565b6135d48161278a565b840191505092915050565b600060208201905081810360008301526135f981846135a6565b905092915050565b7f4d5043206164647265737320697320616c726561647920736574000000000000600082015250565b6000613637601a8361316c565b915061364282613601565b602082019050919050565b600060208201905081810360008301526136668161362a565b9050919050565b7f43616e2774206465706f73697420746f2063757272656e7420646f6d61696e00600082015250565b60006136a3601f8361316c565b91506136ae8261366d565b602082019050919050565b600060208201905081810360008301526136d281613696565b9050919050565b7f6e6f2046656548616e646c65722c206d73672e76616c756520213d2030000000600082015250565b600061370f601d8361316c565b915061371a826136d9565b602082019050919050565b6000602082019050818103600083015261373e81613702565b9050919050565b60006137518385613463565b935061375e8385846128fd565b6137678361278a565b840190509392505050565b600060c082019050613787600083018b61266e565b613794602083018a612f82565b6137a16040830189612f82565b6137ae6060830188613454565b81810360808301526137c1818688613745565b905081810360a08301526137d6818486613745565b90509998505050505050505050565b7f7265736f757263654944206e6f74206d617070656420746f2068616e646c6572600082015250565b600061381b60208361316c565b9150613826826137e5565b602082019050919050565b6000602082019050818103600083015261384a8161380e565b9050919050565b600061385c82612851565b915067ffffffffffffffff821415613877576138766133f4565b5b600182019050919050565b60006060820190506138976000830187613454565b6138a4602083018661266e565b81810360408301526138b7818486613745565b905095945050505050565b60006138d56138d0846128cc565b6127fb565b9050828152602081018484840111156138f1576138f06128c7565b5b6138fc848285613308565b509392505050565b600082601f83011261391957613918612785565b5b81516139298482602086016138c2565b91505092915050565b600060208284031215613948576139476126a2565b5b600082015167ffffffffffffffff811115613966576139656126a7565b5b61397284828501613904565b91505092915050565b600060a0820190506139906000830189612f82565b61399d6020830188613454565b6139aa6040830187612d2d565b81810360608301526139bd818587613745565b905081810360808301526139d18184613474565b9050979650505050505050565b60006139e9826126e5565b91506139f4836126e5565b925082613a0457613a03613394565b5b828206905092915050565b6000613a1a826126e5565b9150613a25836126e5565b925082613a3557613a34613394565b5b828204905092915050565b600060a082019050613a556000830188613454565b613a626020830187612f82565b613a6f6040830186612d2d565b613a7c6060830185613454565b613a896080830184613454565b9695505050505050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b613ac281612891565b82525050565b6000613ad48383613ab9565b60208301905092915050565b6000602082019050919050565b6000613af882613a93565b613b028185613a9e565b9350613b0d83613aa9565b8060005b83811015613b3e578151613b258882613ac8565b9750613b3083613ae0565b925050600181019050613b11565b5085935050505092915050565b6000613b578284613aed565b915081905092915050565b6000604082019050613b776000830185613454565b613b846020830184613454565b9392505050565b60006020820190508181036000830152613ba58184613474565b905092915050565b7f4d504320616464726573732063616e2774206265206e756c6c2d61646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613c0960218361316c565b9150613c1482613bad565b604082019050919050565b60006020820190508181036000830152613c3881613bfc565b9050919050565b7f4d504320616464726573732063616e2774206265207570646174656400000000600082015250565b6000613c75601c8361316c565b9150613c8082613c3f565b602082019050919050565b60006020820190508181036000830152613ca481613c68565b9050919050565b7f446f6573206e6f7420616c6c6f772064656372656d656e7473206f662074686560008201527f206e6f6e63650000000000000000000000000000000000000000000000000000602082015250565b6000613d0760268361316c565b9150613d1282613cab565b604082019050919050565b60006020820190508181036000830152613d3681613cfa565b9050919050565b7f4d50432061646472657373206e6f742073657400000000000000000000000000600082015250565b6000613d7360138361316c565b9150613d7e82613d3d565b602082019050919050565b60006020820190508181036000830152613da281613d66565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000613ddf60108361316c565b9150613dea82613da9565b602082019050919050565b60006020820190508181036000830152613e0e81613dd2565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613e4a81613e15565b82525050565b6000604082019050613e656000830185613e41565b613e72602083018461266e565b9392505050565b600081519050613e8881613008565b92915050565b600060208284031215613ea457613ea36126a2565b5b6000613eb284828501613e79565b91505092915050565b7f73656e64657220646f65736e277420686176652061636365737320746f20667560008201527f6e6374696f6e0000000000000000000000000000000000000000000000000000602082015250565b6000613f1760268361316c565b9150613f2282613ebb565b604082019050919050565b60006020820190508181036000830152613f4681613f0a565b9050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000613f8e600283613f4d565b9150613f9982613f58565b600282019050919050565b6000819050919050565b613fbf613fba82612891565b613fa4565b82525050565b6000613fd082613f81565b9150613fdc8285613fae565b602082019150613fec8284613fae565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061406160188361316c565b915061406c8261402b565b602082019050919050565b6000602082019050818103600083015261409081614054565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006140cd601f8361316c565b91506140d882614097565b602082019050919050565b600060208201905081810360008301526140fc816140c0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061415f60228361316c565b915061416a82614103565b604082019050919050565b6000602082019050818103600083015261418e81614152565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006141f160228361316c565b91506141fc82614195565b604082019050919050565b60006020820190508181036000830152614220816141e4565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061425d60148361316c565b915061426882614227565b602082019050919050565b6000602082019050818103600083015261428c81614250565b9050919050565b600060a0820190506142a86000830188613454565b6142b56020830187613454565b6142c26040830186613454565b6142cf606083018561275b565b6142dc608083018461266e565b9695505050505050565b60006080820190506142fb6000830187613454565b6143086020830186612f82565b6143156040830185613454565b6143226060830184613454565b95945050505050565b6000614336826126e5565b9150614341836126e5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614376576143756133f4565b5b82820190509291505056fea264697066735822122071d25749c2f045e3a9bdf97d107c7ab18297876d9334626f1635320303bfca8764736f6c634300080b0033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, domainID uint8, accessControl common.Address) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, domainID, accessControl)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// MPCAddress is a free data retrieval call binding the contract method 0x059972d2.
//
// Solidity: function _MPCAddress() view returns(address)
func (_Bridge *BridgeCaller) MPCAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_MPCAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MPCAddress is a free data retrieval call binding the contract method 0x059972d2.
//
// Solidity: function _MPCAddress() view returns(address)
func (_Bridge *BridgeSession) MPCAddress() (common.Address, error) {
	return _Bridge.Contract.MPCAddress(&_Bridge.CallOpts)
}

// MPCAddress is a free data retrieval call binding the contract method 0x059972d2.
//
// Solidity: function _MPCAddress() view returns(address)
func (_Bridge *BridgeCallerSession) MPCAddress() (common.Address, error) {
	return _Bridge.Contract.MPCAddress(&_Bridge.CallOpts)
}

// AccessControl is a free data retrieval call binding the contract method 0x44e8e430.
//
// Solidity: function _accessControl() view returns(address)
func (_Bridge *BridgeCaller) AccessControl(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_accessControl")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccessControl is a free data retrieval call binding the contract method 0x44e8e430.
//
// Solidity: function _accessControl() view returns(address)
func (_Bridge *BridgeSession) AccessControl() (common.Address, error) {
	return _Bridge.Contract.AccessControl(&_Bridge.CallOpts)
}

// AccessControl is a free data retrieval call binding the contract method 0x44e8e430.
//
// Solidity: function _accessControl() view returns(address)
func (_Bridge *BridgeCallerSession) AccessControl() (common.Address, error) {
	return _Bridge.Contract.AccessControl(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 uint8) (uint64, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_depositCounts", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DomainID is a free data retrieval call binding the contract method 0x9dd694f4.
//
// Solidity: function _domainID() view returns(uint8)
func (_Bridge *BridgeCaller) DomainID(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_domainID")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DomainID is a free data retrieval call binding the contract method 0x9dd694f4.
//
// Solidity: function _domainID() view returns(uint8)
func (_Bridge *BridgeSession) DomainID() (uint8, error) {
	return _Bridge.Contract.DomainID(&_Bridge.CallOpts)
}

// DomainID is a free data retrieval call binding the contract method 0x9dd694f4.
//
// Solidity: function _domainID() view returns(uint8)
func (_Bridge *BridgeCallerSession) DomainID() (uint8, error) {
	return _Bridge.Contract.DomainID(&_Bridge.CallOpts)
}

// FeeHandler is a free data retrieval call binding the contract method 0xfe4648f4.
//
// Solidity: function _feeHandler() view returns(address)
func (_Bridge *BridgeCaller) FeeHandler(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_feeHandler")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeHandler is a free data retrieval call binding the contract method 0xfe4648f4.
//
// Solidity: function _feeHandler() view returns(address)
func (_Bridge *BridgeSession) FeeHandler() (common.Address, error) {
	return _Bridge.Contract.FeeHandler(&_Bridge.CallOpts)
}

// FeeHandler is a free data retrieval call binding the contract method 0xfe4648f4.
//
// Solidity: function _feeHandler() view returns(address)
func (_Bridge *BridgeCallerSession) FeeHandler() (common.Address, error) {
	return _Bridge.Contract.FeeHandler(&_Bridge.CallOpts)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCaller) ResourceIDToHandlerAddress(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_resourceIDToHandlerAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCallerSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0x9ae0bf45.
//
// Solidity: function isProposalExecuted(uint8 domainID, uint256 depositNonce) view returns(bool)
func (_Bridge *BridgeCaller) IsProposalExecuted(opts *bind.CallOpts, domainID uint8, depositNonce *big.Int) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isProposalExecuted", domainID, depositNonce)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProposalExecuted is a free data retrieval call binding the contract method 0x9ae0bf45.
//
// Solidity: function isProposalExecuted(uint8 domainID, uint256 depositNonce) view returns(bool)
func (_Bridge *BridgeSession) IsProposalExecuted(domainID uint8, depositNonce *big.Int) (bool, error) {
	return _Bridge.Contract.IsProposalExecuted(&_Bridge.CallOpts, domainID, depositNonce)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0x9ae0bf45.
//
// Solidity: function isProposalExecuted(uint8 domainID, uint256 depositNonce) view returns(bool)
func (_Bridge *BridgeCallerSession) IsProposalExecuted(domainID uint8, depositNonce *big.Int) (bool, error) {
	return _Bridge.Contract.IsProposalExecuted(&_Bridge.CallOpts, domainID, depositNonce)
}

// IsValidForwarder is a free data retrieval call binding the contract method 0xf8c39e44.
//
// Solidity: function isValidForwarder(address ) view returns(bool)
func (_Bridge *BridgeCaller) IsValidForwarder(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isValidForwarder", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidForwarder is a free data retrieval call binding the contract method 0xf8c39e44.
//
// Solidity: function isValidForwarder(address ) view returns(bool)
func (_Bridge *BridgeSession) IsValidForwarder(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.IsValidForwarder(&_Bridge.CallOpts, arg0)
}

// IsValidForwarder is a free data retrieval call binding the contract method 0xf8c39e44.
//
// Solidity: function isValidForwarder(address ) view returns(bool)
func (_Bridge *BridgeCallerSession) IsValidForwarder(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.IsValidForwarder(&_Bridge.CallOpts, arg0)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCallerSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// UsedNonces is a free data retrieval call binding the contract method 0x08a64104.
//
// Solidity: function usedNonces(uint8 , uint256 ) view returns(uint256)
func (_Bridge *BridgeCaller) UsedNonces(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "usedNonces", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UsedNonces is a free data retrieval call binding the contract method 0x08a64104.
//
// Solidity: function usedNonces(uint8 , uint256 ) view returns(uint256)
func (_Bridge *BridgeSession) UsedNonces(arg0 uint8, arg1 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.UsedNonces(&_Bridge.CallOpts, arg0, arg1)
}

// UsedNonces is a free data retrieval call binding the contract method 0x08a64104.
//
// Solidity: function usedNonces(uint8 , uint256 ) view returns(uint256)
func (_Bridge *BridgeCallerSession) UsedNonces(arg0 uint8, arg1 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.UsedNonces(&_Bridge.CallOpts, arg0, arg1)
}

// Verify is a free data retrieval call binding the contract method 0xa546e8a1.
//
// Solidity: function verify((uint8,uint64,bytes32,bytes)[] proposals, bytes signature) view returns(bool)
func (_Bridge *BridgeCaller) Verify(opts *bind.CallOpts, proposals []BridgeProposal, signature []byte) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "verify", proposals, signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xa546e8a1.
//
// Solidity: function verify((uint8,uint64,bytes32,bytes)[] proposals, bytes signature) view returns(bool)
func (_Bridge *BridgeSession) Verify(proposals []BridgeProposal, signature []byte) (bool, error) {
	return _Bridge.Contract.Verify(&_Bridge.CallOpts, proposals, signature)
}

// Verify is a free data retrieval call binding the contract method 0xa546e8a1.
//
// Solidity: function verify((uint8,uint64,bytes32,bytes)[] proposals, bytes signature) view returns(bool)
func (_Bridge *BridgeCallerSession) Verify(proposals []BridgeProposal, signature []byte) (bool, error) {
	return _Bridge.Contract.Verify(&_Bridge.CallOpts, proposals, signature)
}

// AdminChangeAccessControl is a paid mutator transaction binding the contract method 0x9d33b6d4.
//
// Solidity: function adminChangeAccessControl(address newAccessControl) returns()
func (_Bridge *BridgeTransactor) AdminChangeAccessControl(opts *bind.TransactOpts, newAccessControl common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeAccessControl", newAccessControl)
}

// AdminChangeAccessControl is a paid mutator transaction binding the contract method 0x9d33b6d4.
//
// Solidity: function adminChangeAccessControl(address newAccessControl) returns()
func (_Bridge *BridgeSession) AdminChangeAccessControl(newAccessControl common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeAccessControl(&_Bridge.TransactOpts, newAccessControl)
}

// AdminChangeAccessControl is a paid mutator transaction binding the contract method 0x9d33b6d4.
//
// Solidity: function adminChangeAccessControl(address newAccessControl) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeAccessControl(newAccessControl common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeAccessControl(&_Bridge.TransactOpts, newAccessControl)
}

// AdminChangeFeeHandler is a paid mutator transaction binding the contract method 0x8b63aebf.
//
// Solidity: function adminChangeFeeHandler(address newFeeHandler) returns()
func (_Bridge *BridgeTransactor) AdminChangeFeeHandler(opts *bind.TransactOpts, newFeeHandler common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeFeeHandler", newFeeHandler)
}

// AdminChangeFeeHandler is a paid mutator transaction binding the contract method 0x8b63aebf.
//
// Solidity: function adminChangeFeeHandler(address newFeeHandler) returns()
func (_Bridge *BridgeSession) AdminChangeFeeHandler(newFeeHandler common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFeeHandler(&_Bridge.TransactOpts, newFeeHandler)
}

// AdminChangeFeeHandler is a paid mutator transaction binding the contract method 0x8b63aebf.
//
// Solidity: function adminChangeFeeHandler(address newFeeHandler) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeFeeHandler(newFeeHandler common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFeeHandler(&_Bridge.TransactOpts, newFeeHandler)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminPauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminPauseTransfers")
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeTransactor) AdminSetBurnable(opts *bind.TransactOpts, handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetBurnable", handlerAddress, tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeSession) AdminSetBurnable(handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, handlerAddress, tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminSetBurnable(handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, handlerAddress, tokenAddress)
}

// AdminSetDepositNonce is a paid mutator transaction binding the contract method 0xedc20c3c.
//
// Solidity: function adminSetDepositNonce(uint8 domainID, uint64 nonce) returns()
func (_Bridge *BridgeTransactor) AdminSetDepositNonce(opts *bind.TransactOpts, domainID uint8, nonce uint64) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetDepositNonce", domainID, nonce)
}

// AdminSetDepositNonce is a paid mutator transaction binding the contract method 0xedc20c3c.
//
// Solidity: function adminSetDepositNonce(uint8 domainID, uint64 nonce) returns()
func (_Bridge *BridgeSession) AdminSetDepositNonce(domainID uint8, nonce uint64) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetDepositNonce(&_Bridge.TransactOpts, domainID, nonce)
}

// AdminSetDepositNonce is a paid mutator transaction binding the contract method 0xedc20c3c.
//
// Solidity: function adminSetDepositNonce(uint8 domainID, uint64 nonce) returns()
func (_Bridge *BridgeTransactorSession) AdminSetDepositNonce(domainID uint8, nonce uint64) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetDepositNonce(&_Bridge.TransactOpts, domainID, nonce)
}

// AdminSetForwarder is a paid mutator transaction binding the contract method 0xd15ef64e.
//
// Solidity: function adminSetForwarder(address forwarder, bool valid) returns()
func (_Bridge *BridgeTransactor) AdminSetForwarder(opts *bind.TransactOpts, forwarder common.Address, valid bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetForwarder", forwarder, valid)
}

// AdminSetForwarder is a paid mutator transaction binding the contract method 0xd15ef64e.
//
// Solidity: function adminSetForwarder(address forwarder, bool valid) returns()
func (_Bridge *BridgeSession) AdminSetForwarder(forwarder common.Address, valid bool) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetForwarder(&_Bridge.TransactOpts, forwarder, valid)
}

// AdminSetForwarder is a paid mutator transaction binding the contract method 0xd15ef64e.
//
// Solidity: function adminSetForwarder(address forwarder, bool valid) returns()
func (_Bridge *BridgeTransactorSession) AdminSetForwarder(forwarder common.Address, valid bool) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetForwarder(&_Bridge.TransactOpts, forwarder, valid)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0x8a3234c7.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes args) returns()
func (_Bridge *BridgeTransactor) AdminSetResource(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, args []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetResource", handlerAddress, resourceID, contractAddress, args)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0x8a3234c7.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes args) returns()
func (_Bridge *BridgeSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, args []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, contractAddress, args)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0x8a3234c7.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes args) returns()
func (_Bridge *BridgeTransactorSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, args []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, contractAddress, args)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminUnpauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminUnpauseTransfers")
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0xbd2a1820.
//
// Solidity: function adminWithdraw(address handlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) AdminWithdraw(opts *bind.TransactOpts, handlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminWithdraw", handlerAddress, data)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0xbd2a1820.
//
// Solidity: function adminWithdraw(address handlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) AdminWithdraw(handlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminWithdraw(&_Bridge.TransactOpts, handlerAddress, data)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0xbd2a1820.
//
// Solidity: function adminWithdraw(address handlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) AdminWithdraw(handlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminWithdraw(&_Bridge.TransactOpts, handlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0x73c45c98.
//
// Solidity: function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", destinationDomainID, resourceID, depositData, feeData)
}

// Deposit is a paid mutator transaction binding the contract method 0x73c45c98.
//
// Solidity: function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_Bridge *BridgeSession) Deposit(destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationDomainID, resourceID, depositData, feeData)
}

// Deposit is a paid mutator transaction binding the contract method 0x73c45c98.
//
// Solidity: function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_Bridge *BridgeTransactorSession) Deposit(destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationDomainID, resourceID, depositData, feeData)
}

// EndKeygen is a paid mutator transaction binding the contract method 0xd2e5fae9.
//
// Solidity: function endKeygen(address MPCAddress) returns()
func (_Bridge *BridgeTransactor) EndKeygen(opts *bind.TransactOpts, MPCAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "endKeygen", MPCAddress)
}

// EndKeygen is a paid mutator transaction binding the contract method 0xd2e5fae9.
//
// Solidity: function endKeygen(address MPCAddress) returns()
func (_Bridge *BridgeSession) EndKeygen(MPCAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.EndKeygen(&_Bridge.TransactOpts, MPCAddress)
}

// EndKeygen is a paid mutator transaction binding the contract method 0xd2e5fae9.
//
// Solidity: function endKeygen(address MPCAddress) returns()
func (_Bridge *BridgeTransactorSession) EndKeygen(MPCAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.EndKeygen(&_Bridge.TransactOpts, MPCAddress)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0xf0ead51e.
//
// Solidity: function executeProposal((uint8,uint64,bytes32,bytes) proposal, bytes signature) returns()
func (_Bridge *BridgeTransactor) ExecuteProposal(opts *bind.TransactOpts, proposal BridgeProposal, signature []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeProposal", proposal, signature)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0xf0ead51e.
//
// Solidity: function executeProposal((uint8,uint64,bytes32,bytes) proposal, bytes signature) returns()
func (_Bridge *BridgeSession) ExecuteProposal(proposal BridgeProposal, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, proposal, signature)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0xf0ead51e.
//
// Solidity: function executeProposal((uint8,uint64,bytes32,bytes) proposal, bytes signature) returns()
func (_Bridge *BridgeTransactorSession) ExecuteProposal(proposal BridgeProposal, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, proposal, signature)
}

// ExecuteProposals is a paid mutator transaction binding the contract method 0x1f5c64c1.
//
// Solidity: function executeProposals((uint8,uint64,bytes32,bytes)[] proposals, bytes signature) returns()
func (_Bridge *BridgeTransactor) ExecuteProposals(opts *bind.TransactOpts, proposals []BridgeProposal, signature []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeProposals", proposals, signature)
}

// ExecuteProposals is a paid mutator transaction binding the contract method 0x1f5c64c1.
//
// Solidity: function executeProposals((uint8,uint64,bytes32,bytes)[] proposals, bytes signature) returns()
func (_Bridge *BridgeSession) ExecuteProposals(proposals []BridgeProposal, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposals(&_Bridge.TransactOpts, proposals, signature)
}

// ExecuteProposals is a paid mutator transaction binding the contract method 0x1f5c64c1.
//
// Solidity: function executeProposals((uint8,uint64,bytes32,bytes)[] proposals, bytes signature) returns()
func (_Bridge *BridgeTransactorSession) ExecuteProposals(proposals []BridgeProposal, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposals(&_Bridge.TransactOpts, proposals, signature)
}

// RefreshKey is a paid mutator transaction binding the contract method 0xd8236744.
//
// Solidity: function refreshKey(string hash) returns()
func (_Bridge *BridgeTransactor) RefreshKey(opts *bind.TransactOpts, hash string) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "refreshKey", hash)
}

// RefreshKey is a paid mutator transaction binding the contract method 0xd8236744.
//
// Solidity: function refreshKey(string hash) returns()
func (_Bridge *BridgeSession) RefreshKey(hash string) (*types.Transaction, error) {
	return _Bridge.Contract.RefreshKey(&_Bridge.TransactOpts, hash)
}

// RefreshKey is a paid mutator transaction binding the contract method 0xd8236744.
//
// Solidity: function refreshKey(string hash) returns()
func (_Bridge *BridgeTransactorSession) RefreshKey(hash string) (*types.Transaction, error) {
	return _Bridge.Contract.RefreshKey(&_Bridge.TransactOpts, hash)
}

// Retry is a paid mutator transaction binding the contract method 0x366b4885.
//
// Solidity: function retry(string txHash) returns()
func (_Bridge *BridgeTransactor) Retry(opts *bind.TransactOpts, txHash string) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "retry", txHash)
}

// Retry is a paid mutator transaction binding the contract method 0x366b4885.
//
// Solidity: function retry(string txHash) returns()
func (_Bridge *BridgeSession) Retry(txHash string) (*types.Transaction, error) {
	return _Bridge.Contract.Retry(&_Bridge.TransactOpts, txHash)
}

// Retry is a paid mutator transaction binding the contract method 0x366b4885.
//
// Solidity: function retry(string txHash) returns()
func (_Bridge *BridgeTransactorSession) Retry(txHash string) (*types.Transaction, error) {
	return _Bridge.Contract.Retry(&_Bridge.TransactOpts, txHash)
}

// StartKeygen is a paid mutator transaction binding the contract method 0x6ba6db6b.
//
// Solidity: function startKeygen() returns()
func (_Bridge *BridgeTransactor) StartKeygen(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "startKeygen")
}

// StartKeygen is a paid mutator transaction binding the contract method 0x6ba6db6b.
//
// Solidity: function startKeygen() returns()
func (_Bridge *BridgeSession) StartKeygen() (*types.Transaction, error) {
	return _Bridge.Contract.StartKeygen(&_Bridge.TransactOpts)
}

// StartKeygen is a paid mutator transaction binding the contract method 0x6ba6db6b.
//
// Solidity: function startKeygen() returns()
func (_Bridge *BridgeTransactorSession) StartKeygen() (*types.Transaction, error) {
	return _Bridge.Contract.StartKeygen(&_Bridge.TransactOpts)
}

// BridgeAccessControlChangedIterator is returned from FilterAccessControlChanged and is used to iterate over the raw logs and unpacked data for AccessControlChanged events raised by the Bridge contract.
type BridgeAccessControlChangedIterator struct {
	Event *BridgeAccessControlChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeAccessControlChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeAccessControlChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeAccessControlChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeAccessControlChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeAccessControlChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeAccessControlChanged represents a AccessControlChanged event raised by the Bridge contract.
type BridgeAccessControlChanged struct {
	NewAccessControl common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessControlChanged is a free log retrieval operation binding the contract event 0x497acaa34ac19c2a2a579ad43eca493b4fea820459e254e9383e7dda216b0f04.
//
// Solidity: event AccessControlChanged(address newAccessControl)
func (_Bridge *BridgeFilterer) FilterAccessControlChanged(opts *bind.FilterOpts) (*BridgeAccessControlChangedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "AccessControlChanged")
	if err != nil {
		return nil, err
	}
	return &BridgeAccessControlChangedIterator{contract: _Bridge.contract, event: "AccessControlChanged", logs: logs, sub: sub}, nil
}

// WatchAccessControlChanged is a free log subscription operation binding the contract event 0x497acaa34ac19c2a2a579ad43eca493b4fea820459e254e9383e7dda216b0f04.
//
// Solidity: event AccessControlChanged(address newAccessControl)
func (_Bridge *BridgeFilterer) WatchAccessControlChanged(opts *bind.WatchOpts, sink chan<- *BridgeAccessControlChanged) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "AccessControlChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeAccessControlChanged)
				if err := _Bridge.contract.UnpackLog(event, "AccessControlChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessControlChanged is a log parse operation binding the contract event 0x497acaa34ac19c2a2a579ad43eca493b4fea820459e254e9383e7dda216b0f04.
//
// Solidity: event AccessControlChanged(address newAccessControl)
func (_Bridge *BridgeFilterer) ParseAccessControlChanged(log types.Log) (*BridgeAccessControlChanged, error) {
	event := new(BridgeAccessControlChanged)
	if err := _Bridge.contract.UnpackLog(event, "AccessControlChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	DestinationDomainID uint8
	ResourceID          [32]byte
	DepositNonce        uint64
	User                common.Address
	Data                []byte
	HandlerResponse     []byte
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f.
//
// Solidity: event Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data, bytes handlerResponse)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, user []common.Address) (*BridgeDepositIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f.
//
// Solidity: event Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data, bytes handlerResponse)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f.
//
// Solidity: event Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data, bytes handlerResponse)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeEndKeygenIterator is returned from FilterEndKeygen and is used to iterate over the raw logs and unpacked data for EndKeygen events raised by the Bridge contract.
type BridgeEndKeygenIterator struct {
	Event *BridgeEndKeygen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeEndKeygenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeEndKeygen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeEndKeygen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeEndKeygenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeEndKeygenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeEndKeygen represents a EndKeygen event raised by the Bridge contract.
type BridgeEndKeygen struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEndKeygen is a free log retrieval operation binding the contract event 0x4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad57.
//
// Solidity: event EndKeygen()
func (_Bridge *BridgeFilterer) FilterEndKeygen(opts *bind.FilterOpts) (*BridgeEndKeygenIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "EndKeygen")
	if err != nil {
		return nil, err
	}
	return &BridgeEndKeygenIterator{contract: _Bridge.contract, event: "EndKeygen", logs: logs, sub: sub}, nil
}

// WatchEndKeygen is a free log subscription operation binding the contract event 0x4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad57.
//
// Solidity: event EndKeygen()
func (_Bridge *BridgeFilterer) WatchEndKeygen(opts *bind.WatchOpts, sink chan<- *BridgeEndKeygen) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "EndKeygen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeEndKeygen)
				if err := _Bridge.contract.UnpackLog(event, "EndKeygen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEndKeygen is a log parse operation binding the contract event 0x4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad57.
//
// Solidity: event EndKeygen()
func (_Bridge *BridgeFilterer) ParseEndKeygen(log types.Log) (*BridgeEndKeygen, error) {
	event := new(BridgeEndKeygen)
	if err := _Bridge.contract.UnpackLog(event, "EndKeygen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFailedHandlerExecutionIterator is returned from FilterFailedHandlerExecution and is used to iterate over the raw logs and unpacked data for FailedHandlerExecution events raised by the Bridge contract.
type BridgeFailedHandlerExecutionIterator struct {
	Event *BridgeFailedHandlerExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFailedHandlerExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFailedHandlerExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFailedHandlerExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFailedHandlerExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFailedHandlerExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFailedHandlerExecution represents a FailedHandlerExecution event raised by the Bridge contract.
type BridgeFailedHandlerExecution struct {
	LowLevelData   []byte
	OriginDomainID uint8
	DepositNonce   uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterFailedHandlerExecution is a free log retrieval operation binding the contract event 0x19f774a63ee465292252a9981ae52051acc13da671c698ac4b5bf25b38c5b6fc.
//
// Solidity: event FailedHandlerExecution(bytes lowLevelData, uint8 originDomainID, uint64 depositNonce)
func (_Bridge *BridgeFilterer) FilterFailedHandlerExecution(opts *bind.FilterOpts) (*BridgeFailedHandlerExecutionIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "FailedHandlerExecution")
	if err != nil {
		return nil, err
	}
	return &BridgeFailedHandlerExecutionIterator{contract: _Bridge.contract, event: "FailedHandlerExecution", logs: logs, sub: sub}, nil
}

// WatchFailedHandlerExecution is a free log subscription operation binding the contract event 0x19f774a63ee465292252a9981ae52051acc13da671c698ac4b5bf25b38c5b6fc.
//
// Solidity: event FailedHandlerExecution(bytes lowLevelData, uint8 originDomainID, uint64 depositNonce)
func (_Bridge *BridgeFilterer) WatchFailedHandlerExecution(opts *bind.WatchOpts, sink chan<- *BridgeFailedHandlerExecution) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "FailedHandlerExecution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFailedHandlerExecution)
				if err := _Bridge.contract.UnpackLog(event, "FailedHandlerExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedHandlerExecution is a log parse operation binding the contract event 0x19f774a63ee465292252a9981ae52051acc13da671c698ac4b5bf25b38c5b6fc.
//
// Solidity: event FailedHandlerExecution(bytes lowLevelData, uint8 originDomainID, uint64 depositNonce)
func (_Bridge *BridgeFilterer) ParseFailedHandlerExecution(log types.Log) (*BridgeFailedHandlerExecution, error) {
	event := new(BridgeFailedHandlerExecution)
	if err := _Bridge.contract.UnpackLog(event, "FailedHandlerExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeHandlerChangedIterator is returned from FilterFeeHandlerChanged and is used to iterate over the raw logs and unpacked data for FeeHandlerChanged events raised by the Bridge contract.
type BridgeFeeHandlerChangedIterator struct {
	Event *BridgeFeeHandlerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeHandlerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeHandlerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeHandlerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeHandlerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeHandlerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeHandlerChanged represents a FeeHandlerChanged event raised by the Bridge contract.
type BridgeFeeHandlerChanged struct {
	NewFeeHandler common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFeeHandlerChanged is a free log retrieval operation binding the contract event 0x729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c.
//
// Solidity: event FeeHandlerChanged(address newFeeHandler)
func (_Bridge *BridgeFilterer) FilterFeeHandlerChanged(opts *bind.FilterOpts) (*BridgeFeeHandlerChangedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "FeeHandlerChanged")
	if err != nil {
		return nil, err
	}
	return &BridgeFeeHandlerChangedIterator{contract: _Bridge.contract, event: "FeeHandlerChanged", logs: logs, sub: sub}, nil
}

// WatchFeeHandlerChanged is a free log subscription operation binding the contract event 0x729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c.
//
// Solidity: event FeeHandlerChanged(address newFeeHandler)
func (_Bridge *BridgeFilterer) WatchFeeHandlerChanged(opts *bind.WatchOpts, sink chan<- *BridgeFeeHandlerChanged) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "FeeHandlerChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeHandlerChanged)
				if err := _Bridge.contract.UnpackLog(event, "FeeHandlerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeHandlerChanged is a log parse operation binding the contract event 0x729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c.
//
// Solidity: event FeeHandlerChanged(address newFeeHandler)
func (_Bridge *BridgeFilterer) ParseFeeHandlerChanged(log types.Log) (*BridgeFeeHandlerChanged, error) {
	event := new(BridgeFeeHandlerChanged)
	if err := _Bridge.contract.UnpackLog(event, "FeeHandlerChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeKeyRefreshIterator is returned from FilterKeyRefresh and is used to iterate over the raw logs and unpacked data for KeyRefresh events raised by the Bridge contract.
type BridgeKeyRefreshIterator struct {
	Event *BridgeKeyRefresh // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeKeyRefreshIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeKeyRefresh)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeKeyRefresh)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeKeyRefreshIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeKeyRefreshIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeKeyRefresh represents a KeyRefresh event raised by the Bridge contract.
type BridgeKeyRefresh struct {
	Hash string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterKeyRefresh is a free log retrieval operation binding the contract event 0xe78d813a9260522f81d6c761e311727b2e19008daadd2b9e174be86bc4f06a4b.
//
// Solidity: event KeyRefresh(string hash)
func (_Bridge *BridgeFilterer) FilterKeyRefresh(opts *bind.FilterOpts) (*BridgeKeyRefreshIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "KeyRefresh")
	if err != nil {
		return nil, err
	}
	return &BridgeKeyRefreshIterator{contract: _Bridge.contract, event: "KeyRefresh", logs: logs, sub: sub}, nil
}

// WatchKeyRefresh is a free log subscription operation binding the contract event 0xe78d813a9260522f81d6c761e311727b2e19008daadd2b9e174be86bc4f06a4b.
//
// Solidity: event KeyRefresh(string hash)
func (_Bridge *BridgeFilterer) WatchKeyRefresh(opts *bind.WatchOpts, sink chan<- *BridgeKeyRefresh) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "KeyRefresh")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeKeyRefresh)
				if err := _Bridge.contract.UnpackLog(event, "KeyRefresh", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRefresh is a log parse operation binding the contract event 0xe78d813a9260522f81d6c761e311727b2e19008daadd2b9e174be86bc4f06a4b.
//
// Solidity: event KeyRefresh(string hash)
func (_Bridge *BridgeFilterer) ParseKeyRefresh(log types.Log) (*BridgeKeyRefresh, error) {
	event := new(BridgeKeyRefresh)
	if err := _Bridge.contract.UnpackLog(event, "KeyRefresh", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Bridge contract.
type BridgePausedIterator struct {
	Event *BridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgePaused represents a Paused event raised by the Bridge contract.
type BridgePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*BridgePausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BridgePausedIterator{contract: _Bridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BridgePaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgePaused)
				if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) ParsePaused(log types.Log) (*BridgePaused, error) {
	event := new(BridgePaused)
	if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeProposalExecutionIterator is returned from FilterProposalExecution and is used to iterate over the raw logs and unpacked data for ProposalExecution events raised by the Bridge contract.
type BridgeProposalExecutionIterator struct {
	Event *BridgeProposalExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalExecution represents a ProposalExecution event raised by the Bridge contract.
type BridgeProposalExecution struct {
	OriginDomainID uint8
	DepositNonce   uint64
	DataHash       [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterProposalExecution is a free log retrieval operation binding the contract event 0x6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677.
//
// Solidity: event ProposalExecution(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) FilterProposalExecution(opts *bind.FilterOpts) (*BridgeProposalExecutionIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalExecution")
	if err != nil {
		return nil, err
	}
	return &BridgeProposalExecutionIterator{contract: _Bridge.contract, event: "ProposalExecution", logs: logs, sub: sub}, nil
}

// WatchProposalExecution is a free log subscription operation binding the contract event 0x6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677.
//
// Solidity: event ProposalExecution(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) WatchProposalExecution(opts *bind.WatchOpts, sink chan<- *BridgeProposalExecution) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalExecution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalExecution)
				if err := _Bridge.contract.UnpackLog(event, "ProposalExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalExecution is a log parse operation binding the contract event 0x6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677.
//
// Solidity: event ProposalExecution(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) ParseProposalExecution(log types.Log) (*BridgeProposalExecution, error) {
	event := new(BridgeProposalExecution)
	if err := _Bridge.contract.UnpackLog(event, "ProposalExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRetryIterator is returned from FilterRetry and is used to iterate over the raw logs and unpacked data for Retry events raised by the Bridge contract.
type BridgeRetryIterator struct {
	Event *BridgeRetry // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRetryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRetry)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRetry)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRetryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRetryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRetry represents a Retry event raised by the Bridge contract.
type BridgeRetry struct {
	TxHash string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetry is a free log retrieval operation binding the contract event 0x9069464c059b9a90135a3fdf2c47855263346b912894ad7562d989532c3fad4c.
//
// Solidity: event Retry(string txHash)
func (_Bridge *BridgeFilterer) FilterRetry(opts *bind.FilterOpts) (*BridgeRetryIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Retry")
	if err != nil {
		return nil, err
	}
	return &BridgeRetryIterator{contract: _Bridge.contract, event: "Retry", logs: logs, sub: sub}, nil
}

// WatchRetry is a free log subscription operation binding the contract event 0x9069464c059b9a90135a3fdf2c47855263346b912894ad7562d989532c3fad4c.
//
// Solidity: event Retry(string txHash)
func (_Bridge *BridgeFilterer) WatchRetry(opts *bind.WatchOpts, sink chan<- *BridgeRetry) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Retry")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRetry)
				if err := _Bridge.contract.UnpackLog(event, "Retry", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetry is a log parse operation binding the contract event 0x9069464c059b9a90135a3fdf2c47855263346b912894ad7562d989532c3fad4c.
//
// Solidity: event Retry(string txHash)
func (_Bridge *BridgeFilterer) ParseRetry(log types.Log) (*BridgeRetry, error) {
	event := new(BridgeRetry)
	if err := _Bridge.contract.UnpackLog(event, "Retry", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeStartKeygenIterator is returned from FilterStartKeygen and is used to iterate over the raw logs and unpacked data for StartKeygen events raised by the Bridge contract.
type BridgeStartKeygenIterator struct {
	Event *BridgeStartKeygen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeStartKeygenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeStartKeygen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeStartKeygen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeStartKeygenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeStartKeygenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeStartKeygen represents a StartKeygen event raised by the Bridge contract.
type BridgeStartKeygen struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStartKeygen is a free log retrieval operation binding the contract event 0x24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce43.
//
// Solidity: event StartKeygen()
func (_Bridge *BridgeFilterer) FilterStartKeygen(opts *bind.FilterOpts) (*BridgeStartKeygenIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "StartKeygen")
	if err != nil {
		return nil, err
	}
	return &BridgeStartKeygenIterator{contract: _Bridge.contract, event: "StartKeygen", logs: logs, sub: sub}, nil
}

// WatchStartKeygen is a free log subscription operation binding the contract event 0x24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce43.
//
// Solidity: event StartKeygen()
func (_Bridge *BridgeFilterer) WatchStartKeygen(opts *bind.WatchOpts, sink chan<- *BridgeStartKeygen) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "StartKeygen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeStartKeygen)
				if err := _Bridge.contract.UnpackLog(event, "StartKeygen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStartKeygen is a log parse operation binding the contract event 0x24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce43.
//
// Solidity: event StartKeygen()
func (_Bridge *BridgeFilterer) ParseStartKeygen(log types.Log) (*BridgeStartKeygen, error) {
	event := new(BridgeStartKeygen)
	if err := _Bridge.contract.UnpackLog(event, "StartKeygen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Bridge contract.
type BridgeUnpausedIterator struct {
	Event *BridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnpaused represents a Unpaused event raised by the Bridge contract.
type BridgeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BridgeUnpausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BridgeUnpausedIterator{contract: _Bridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnpaused)
				if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) ParseUnpaused(log types.Log) (*BridgeUnpaused, error) {
	event := new(BridgeUnpaused)
	if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
