// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/sygma-fee-oracle/oracle (interfaces: GasPriceOracle,ConversionRateOracle)

// Package mock_oracle is a generated GoMock package.
package mock_oracle

import (
	reflect "reflect"

	types "github.com/ChainSafe/sygma-fee-oracle/types"
	gomock "github.com/golang/mock/gomock"
)

// MockGasPriceOracle is a mock of GasPriceOracle interface.
type MockGasPriceOracle struct {
	ctrl     *gomock.Controller
	recorder *MockGasPriceOracleMockRecorder
}

// MockGasPriceOracleMockRecorder is the mock recorder for MockGasPriceOracle.
type MockGasPriceOracleMockRecorder struct {
	mock *MockGasPriceOracle
}

// NewMockGasPriceOracle creates a new mock instance.
func NewMockGasPriceOracle(ctrl *gomock.Controller) *MockGasPriceOracle {
	mock := &MockGasPriceOracle{ctrl: ctrl}
	mock.recorder = &MockGasPriceOracleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasPriceOracle) EXPECT() *MockGasPriceOracleMockRecorder {
	return m.recorder
}

// InquiryGasPrice mocks base method.
func (m *MockGasPriceOracle) InquiryGasPrice() (*types.GasPrices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InquiryGasPrice")
	ret0, _ := ret[0].(*types.GasPrices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InquiryGasPrice indicates an expected call of InquiryGasPrice.
func (mr *MockGasPriceOracleMockRecorder) InquiryGasPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InquiryGasPrice", reflect.TypeOf((*MockGasPriceOracle)(nil).InquiryGasPrice))
}

// IsEnabled mocks base method.
func (m *MockGasPriceOracle) IsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockGasPriceOracleMockRecorder) IsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockGasPriceOracle)(nil).IsEnabled))
}

// Source mocks base method.
func (m *MockGasPriceOracle) Source() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(string)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockGasPriceOracleMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockGasPriceOracle)(nil).Source))
}

// MockConversionRateOracle is a mock of ConversionRateOracle interface.
type MockConversionRateOracle struct {
	ctrl     *gomock.Controller
	recorder *MockConversionRateOracleMockRecorder
}

// MockConversionRateOracleMockRecorder is the mock recorder for MockConversionRateOracle.
type MockConversionRateOracleMockRecorder struct {
	mock *MockConversionRateOracle
}

// NewMockConversionRateOracle creates a new mock instance.
func NewMockConversionRateOracle(ctrl *gomock.Controller) *MockConversionRateOracle {
	mock := &MockConversionRateOracle{ctrl: ctrl}
	mock.recorder = &MockConversionRateOracleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversionRateOracle) EXPECT() *MockConversionRateOracleMockRecorder {
	return m.recorder
}

// InquiryConversionRate mocks base method.
func (m *MockConversionRateOracle) InquiryConversionRate(arg0, arg1 string) (*types.ConversionRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InquiryConversionRate", arg0, arg1)
	ret0, _ := ret[0].(*types.ConversionRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InquiryConversionRate indicates an expected call of InquiryConversionRate.
func (mr *MockConversionRateOracleMockRecorder) InquiryConversionRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InquiryConversionRate", reflect.TypeOf((*MockConversionRateOracle)(nil).InquiryConversionRate), arg0, arg1)
}

// IsEnabled mocks base method.
func (m *MockConversionRateOracle) IsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockConversionRateOracleMockRecorder) IsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockConversionRateOracle)(nil).IsEnabled))
}

// Source mocks base method.
func (m *MockConversionRateOracle) Source() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(string)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockConversionRateOracleMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockConversionRateOracle)(nil).Source))
}
